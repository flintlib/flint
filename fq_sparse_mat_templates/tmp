    int ret = 0;
    slong l;
    
    std::vector<Vector> combi(block_size,Vector(F,d[l]+1));
    for (size_t i=0;i<block_size;++i)
            for (size_t k=0;k<d[l]+1;++k)
                    combi[i][k]=minpoly[k].getEntry(l,i);
    lhs = combi[0][d[l]]*A^t y
    lhs2 = lhs
    for (int i = (int)d[l]-1 ; i > 0;--i) {
        lhs = lhs2 + combi[0][i]*y;
        lhs2 = A^t*lhs;
    }
    Vector accu (lhs);
    _TEMPLATE(T, vec_zero) (x, A->r, ctx);
    for (size_t k=1;k<block_size;++k){

        Vector row(F,m);
        for (size_t j=0;j<m;++j)
            row[j]=UA.getEntry(k-1,j);
        lhs = combi[k][d[l]]*A^t row;
        lhs2 = lhs;
        for (int i = (int)d[l]-1 ; i >= 0;--i) {
            lhs = lhs2 + combi[k][i]*row;
            lhs2 = A^t * lhs
        }
        _TEMPLATE(T, vec_add) (x, x, lhs, A->r, ctx);
    }
    TEMPLATE(T, neg) (cc, nmod_inv(S[0].rows[l][0], ctx), ctx);
    _TEMPLATE(T, vec_scalar_mul) (x, x, A->r, cc, ctx);
    return ret;
