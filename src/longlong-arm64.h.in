/*
   Copyright 1991, 1992, 1993, 1994, 1996, 1997, 1999, 2000, 2001, 2002, 2003,
   2004, 2005 Free Software Foundation, Inc.

   Copyright 2009, 2015, 2016 William Hart
   Copyright 2011 Fredrik Johansson
   Copyright 2023 Albin Ahlb√§ck

   This file is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation; either version 2.1 of the License, or (at your
   option) any later version.

   This file is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
   License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this file; see the file COPYING.LIB.  If not, write to
   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   MA 02110-1301, USA.
*/

/*
   N.B: This file has been adapted from code found in GMP 4.2.1.
*/

#ifndef FLINT_LONGLONG_H
#define FLINT_LONGLONG_H

#ifdef __cplusplus
extern "C" {
#endif

#define FLINT_KNOW_STRONG_ORDER 0

#ifndef _LONG_LONG_LIMB
# define flint_clz __builtin_clzl
# define flint_ctz __builtin_ctzl
#else
# define flint_clz __builtin_clzll
# define flint_ctz __builtin_ctzll
#endif

#define add_ssaaaa(sh, sl, ah, al, bh, bl)               \
  __asm__ ("adds %1,%3,%5\n\tadc %0,%2,%4"               \
       : "=r" (sh), "=&r" (sl)                           \
       : "r"  ((mp_limb_t)(ah)), "r" ((mp_limb_t)(al)),  \
         "r" ((mp_limb_t)(bh)), "rI" ((mp_limb_t)(bl))   \
       : "cc")

#define add_sssaaaaaa(sh, sm, sl, ah, am, al, bh, bm, bl)                     \
  __asm__ ("adds %2,%5,%8\n\tadcs %1,%4,%7\n\tadc %0,%3,%6"                   \
       : "=r" (sh), "=&r" (sm), "=&r" (sl)                                    \
       : "r"  ((mp_limb_t)(ah)), "r" ((mp_limb_t)(am)), "r" ((mp_limb_t)(al)),\
         "r" ((mp_limb_t)(bh)), "r" ((mp_limb_t)(bm)), "rI" ((mp_limb_t)(bl)) \
       : "cc")

#define add_ssssaaaaaaaa(s3, s2, s1, s0, a3, a2, a1, a0, b3, b2, b1, b0)      \
  __asm__ ("adds %3,%7,%11\n\tadcs %2,%6,%10\n\tadcs %1,%5,%9\n\tadc %0,%4,%8"\
       : "=r" (s3), "=&r" (s2), "=&r" (s1), "=&r" (s0)                        \
       : "r" ((mp_limb_t)(a3)), "r" ((mp_limb_t)(a2)),                        \
         "r" ((mp_limb_t)(a1)), "r" ((mp_limb_t)(a0)),                        \
         "r" ((mp_limb_t)(b3)), "r" ((mp_limb_t)(b2)),                        \
         "r" ((mp_limb_t)(b1)), "rI" ((mp_limb_t)(b0))                        \
       : "cc")

#define sub_ddmmss(sh, sl, ah, al, bh, bl)               \
  __asm__ ("subs %1,%3,%5\n\tsbc %0,%2,%4"               \
       : "=r" (sh), "=&r" (sl)                           \
       : "r"  ((mp_limb_t)(ah)), "r" ((mp_limb_t)(al)),  \
         "r" ((mp_limb_t)(bh)), "rI" ((mp_limb_t)(bl))   \
       : "cc")

#define sub_dddmmmsss(sh, sm, sl, ah, am, al, bh, bm, bl)                     \
  __asm__ ("subs %2,%5,%8\n\tsbcs %1,%4,%7\n\tsbc %0,%3,%6"                   \
       : "=r" (sh), "=&r" (sm), "=&r" (sl)                                    \
       : "r"  ((mp_limb_t)(ah)), "r" ((mp_limb_t)(am)), "r" ((mp_limb_t)(al)),\
         "r" ((mp_limb_t)(bh)), "r" ((mp_limb_t)(bm)), "rI" ((mp_limb_t)(bl)) \
       : "cc")

#define umul_ppmm(xh, xl, a, b) \
  __asm__ ("mul %0,%2,%3\numulh %1,%2,%3" : "=&r" (xl), "=&r" (xh) : "r" (a), "r" (b))

#define smul_ppmm(xh, xl, a, b) \
  __asm__ ("mul %0,%2,%3\nsmulh %1,%2,%3" : "=&r" (xl), "=&r" (xh) : "r" (a), "r" (b))

#define __ll_B ((mp_limb_t) 1 << (GMP_LIMB_BITS / 2))
#define __ll_lowpart(t) ((mp_limb_t) (t) & (__ll_B - 1))
#define __ll_highpart(t) ((mp_limb_t) (t) >> (GMP_LIMB_BITS / 2))
#define __highbit (~(mp_limb_t)0 ^ ((~(mp_limb_t)0) >> 1))

#define udiv_qrnnd_int(q, r, n1, n0, d)                 \
  do {                                                  \
    mp_limb_t __d1, __d0, __q1, __q0, __r1, __r0, __m;  \
                                                        \
    FLINT_ASSERT ((d) != 0);                            \
    FLINT_ASSERT ((n1) < (d));                          \
                                                        \
    __d1 = __ll_highpart (d);                           \
    __d0 = __ll_lowpart (d);                            \
                                                        \
    __q1 = (n1) / __d1;                                 \
    __r1 = (n1) - __q1 * __d1;                          \
    __m = __q1 * __d0;                                  \
    __r1 = __r1 * __ll_B | __ll_highpart (n0);          \
    if (__r1 < __m)                                     \
    {                                                   \
      __q1--, __r1 += (d);                              \
      if (__r1 >= (d)) /* i.e. we didn't get carry when adding to __r1 */ \
        if (__r1 < __m)                                 \
          __q1--, __r1 += (d);                          \
    }                                                   \
    __r1 -= __m;                                        \
                                                        \
    __q0 = __r1 / __d1;                                 \
    __r0 = __r1  - __q0 * __d1;                         \
    __m = __q0 * __d0;                                  \
    __r0 = __r0 * __ll_B | __ll_lowpart (n0);           \
    if (__r0 < __m)                                     \
    {                                                   \
      __q0--, __r0 += (d);                              \
      if (__r0 >= (d))                                  \
        if (__r0 < __m)                                 \
          __q0--, __r0 += (d);                          \
    }                                                   \
    __r0 -= __m;                                        \
                                                        \
    (q) = __q1 * __ll_B | __q0;                         \
    (r) = __r0;                                         \
  } while (0)

#define udiv_qrnnd(q, r, n1, n0, d)             \
  do {                                          \
    mp_limb_t __norm = flint_clz(d);            \
    if (__norm)                                 \
    {                                           \
      udiv_qrnnd_int((q), (r), ((n1) << __norm) + ((n0) >> (GMP_LIMB_BITS - __norm)), (n0) << __norm, (d) << __norm); \
      (r) = ((mp_limb_t) (r) >> __norm);        \
    }                                           \
    else                                        \
      udiv_qrnnd_int((q), (r), (n1), (n0), (d));\
  } while (0)

#define sdiv_qrnnd(q, r, n1, n0, d)         \
  do {                                      \
    mp_limb_t __n1, __n0, __d;              \
    mp_limb_t __q, __r;                     \
    unsigned int __sgn_n = 0, __sgn_d = 0;  \
    if ((n1) & __highbit)                   \
    {                                       \
       __n0 = -(n0);                        \
       __n1 = ~(n1) + (__n0 == 0);          \
       __sgn_n = ~__sgn_n;                  \
    } else                                  \
    {                                       \
      __n0 = (n0);                          \
      __n1 = (n1);                          \
    }                                       \
    if ((d) & __highbit)                    \
    {                                       \
        __d = -(d);                         \
        __sgn_d = ~__sgn_d;                 \
    } else                                  \
    {                                       \
        __d = (d);                          \
    }                                       \
    udiv_qrnnd(__q, __r, __n1, __n0, __d);  \
    q = (__sgn_n == __sgn_d) ? __q : -__q;  \
    r = (__sgn_n == 0) ? __r : -__r;        \
  } while (0)

#define byte_swap(n) do { (n) = __builtin_bswap64(n); } while (0)

#define udiv_qrnnd_preinv(q, r, nh, nl, d, di)               \
  do {                                                       \
    mp_limb_t _n2, _n10, _nmask, _nadj, _q1;                 \
    mp_limb_t _xh, _xl;                                      \
    _n2 = (nh);                                              \
    _n10 = (nl);                                             \
    _nmask = (mp_limb_signed_t) (_n10) >> (FLINT_BITS - 1);  \
    _nadj = _n10 + (_nmask & (d));                           \
    umul_ppmm (_xh, _xl, di, _n2 - _nmask);                  \
    add_ssaaaa (_xh, _xl, _xh, _xl, _n2, _nadj);             \
    _q1 = ~_xh;                                              \
    umul_ppmm (_xh, _xl, _q1, d);                            \
    add_ssaaaa (_xh, _xl, _xh, _xl, nh, nl);                 \
    _xh -= (d);                 /* xh = 0 or -1 */           \
    (r) = _xl + ((d) & _xh);                                 \
    (q) = _xh - _q1;                                         \
  } while (0)

#ifdef __cplusplus
}
#endif

#endif
