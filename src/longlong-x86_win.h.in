/*
   Copyright 1991, 1992, 1993, 1994, 1996, 1997, 1999, 2000, 2001, 2002, 2003,
   2004, 2005 Free Software Foundation, Inc.

   Copyright 2009, 2015, 2016 William Hart
   Copyright 2011 Fredrik Johansson
   Copyright 2023 Albin Ahlb√§ck

   This file is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation; either version 2.1 of the License, or (at your
   option) any later version.

   This file is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
   License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this file; see the file COPYING.LIB.  If not, write to
   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   MA 02110-1301, USA.
*/

/*
   N.B: This file has been adapted from code found in GMP 4.2.1.
*/

#ifndef FLINT_LONGLONG_H
#define FLINT_LONGLONG_H

#ifdef __cplusplus
extern "C" {
#endif

#include <intrin.h>
#include <immintrin.h>
#include <stdlib.h>

#define FLINT_KNOW_STRONG_ORDER 1

#if GMP_LIMB_BITS == 32
# define flint_clz __lzcnt
# define flint_ctz _tzcnt_u32
# define _flint_adc_ _addcarry_u32
# define _flint_sbc_ _subborrow_u32
# define _flint_umul_ _mulx_u32
# define byte_swap(n) do { n = _byteswap_ulong(n); } while (0)
#else
# define flint_clz __lzcnt64
# define flint_ctz _tzcnt_u64
# define _flint_adc_ _addcarry_u64
# define _flint_sbc_ _subborrow_u64
# define _flint_umul_ _mulx_u64
# define byte_swap(n) do { n = _byteswap_uint64(n); } while (0)
#endif

#define add_ssaaaa(s1, s0, a1, a0, b1, b0)  \
  do {                                      \
    unsigned char carry;                    \
    carry = _flint_adc_(0, a0, b0, &s0);    \
    _flint_adc_(carry, a1, b1, &s1);        \
  } while (0)

#define add_sssaaaaaa(s2, s1, s0, a2, a1, a0, b2, b1, b0) \
  do {                                      \
    unsigned char carry;                    \
    carry = _flint_adc_(0, a0, b0, &s0);    \
    carry = _flint_adc_(carry, a1, b1, &s1);\
    _flint_adc_(carry, a2, b2, &s2);        \
  } while (0)

#define add_ssssaaaaaaaa(s3, s2, s1, s0, a3, a2, a1, a0, b3, b2, b1, b0) \
  do {                                      \
    unsigned char carry;                    \
    carry = _flint_adc_(0, a0, b0, &s0);    \
    carry = _flint_adc_(carry, a1, b1, &s1);\
    carry = _flint_adc_(carry, a2, b2, &s2);\
    _flint_adc_(carry, a3, b3, &s3);        \
  } while (0)

#define sub_ddmmss(s1, s0, a1, a0, b1, b0)  \
  do {                                      \
    unsigned char carry;                    \
    carry = _flint_sbc_(0, a0, b0, &s0);    \
    _flint_sbc_(carry, a1, b1, &s1);        \
  } while (0)

#define sub_dddmmmsss(s2, s1, s0, a2, a1, a0, b2, b1, b0) \
  do {                                      \
    unsigned char carry;                    \
    carry = _flint_sbc_(0, a0, b0, &s0);    \
    carry = _flint_sbc_(carry, a1, b1, &s1);\
    _flint_sbc_(carry, a2, b2, &s2);        \
  } while (0)

#define umul_ppmm(w1, w0, u, v)       \
  do {                                \
    (w0) = _flint_umul_(u, v, &(w1)); \
  } while (0)

#if GMP_LIMB_BITS == 32
# define smul_ppmm(w1, w0, u, v)  \
  do {                            \
    long long int res, a, b;      \
    a = (long long int) (u);      \
    b = (long long int) (v);      \
    res = a * b;                  \
    (w0) = (long int) res;        \
    (w1) = (long int) (res >> 32);\
  } while (0)

# define udiv_qrnnd(q, r, n1, n0, dx) \
  do {                                \
    unsigned __int64 n;               \
    n = ((unsigned __int64) (n1)) << 32 + (unsigned __int64) (n0); \
    (q) = _udiv64(n, dx, &(r));       \
  } while (0)

# define sdiv_qrnnd(q, r, n1, n0, dx) \
  do {                                \
    __int64 n;                        \
    n = ((__int64) (n1)) << 32 + (__int64) (n0); \
    (q) = _div64(n, dx, &(r));        \
  } while (0)
#else
# define smul_ppmm(w1, w0, u, v)  \
  do {                            \
    (w0) = _mul128(u, v, &(w1));  \
  } while (0)

# define udiv_qrnnd(q, r, n1, n0, dx) \
  do {                                \
    (q) = _udiv128(n1, n0, dx, &(r)); \
  } while (0)

# define sdiv_qrnnd(q, r, n1, n0, dx) \
  do {                                \
    (q) = _div128(n1, n0, dx, &(r));  \
  } while (0)
#endif

#define udiv_qrnnd_preinv(q, r, nh, nl, d, di)               \
  do {                                                       \
    mp_limb_t _n2, _n10, _nmask, _nadj, _q1;                 \
    mp_limb_t _xh, _xl;                                      \
    _n2 = (nh);                                              \
    _n10 = (nl);                                             \
    _nmask = (mp_limb_signed_t) (_n10) >> (FLINT_BITS - 1);  \
    _nadj = _n10 + (_nmask & (d));                           \
    umul_ppmm (_xh, _xl, di, _n2 - _nmask);                  \
    add_ssaaaa (_xh, _xl, _xh, _xl, _n2, _nadj);             \
    _q1 = ~_xh;                                              \
    umul_ppmm (_xh, _xl, _q1, d);                            \
    add_ssaaaa (_xh, _xl, _xh, _xl, nh, nl);                 \
    _xh -= (d);                 /* xh = 0 or -1 */           \
    (r) = _xl + ((d) & _xh);                                 \
    (q) = _xh - _q1;                                         \
  } while (0)

#ifdef __cplusplus
}
#endif

#endif
