#
# Copyright (C) 2023 Albin Ahlb√§ck
#
# This file is part of FLINT.
#
# FLINT is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License (LGPL) as published
# by the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.  See <https://www.gnu.org/licenses/>.
#

FLINT_DIR:=.
SRC_DIR:=src
BUILD_DIR:=build
ABS_FLINT_DIR:='$(patsubst %/,%, $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))'
ABS_SRC_DIR:=$(ABS_FLINT_DIR)/$(SRC_DIR)
ABS_BUILD_DIR:=$(ABS_FLINT_DIR)/$(SRC_DIR)

FLINT_VERSION:=@FLINT_VERSION_FULL@
FLINT_MAJOR_SO:=@FLINT_MAJOR_SO@
FLINT_MINOR_SO:=@FLINT_MINOR_SO@
FLINT_PATCH_SO:=@FLINT_PATCH_SO@

FLINT_LIB:=@FLINT_LIB@
FLINT_LIB_MAJOR:=@FLINT_LIB_MAJOR@
FLINT_LIB_FULL:=@FLINT_LIB_FULL@
FLINT_IMPLIB:=@FLINT_IMPLIB@
FLINT_LIB_STATIC:=@FLINT_LIB_STATIC@

FLINT_DLLLIB:=@FLINT_DLLLIB@
FLINT_DYLIB:=@FLINT_DYLIB@
FLINT_SOLIB:=@FLINT_SOLIB@

prefix:=@prefix@
exec_prefix:=@exec_prefix@

INCLUDEDIR:=$(DESTDIR)@includedir@
LIBDIR:=$(DESTDIR)@libdir@
BINDIR:=$(DESTDIR)@bindir@
PKGCONFIGDIR:=$(LIBDIR)/pkgconfig

HOST_OS:=@host_os@

EXEEXT:=@EXEEXT@

AR:=@AR@
CC:=@CC@
CXX:=@CC@
DLLTOOL:=@DLLTOOL@
LD:=@LD@
LDCONFIG:=@LDCONFIG@
LN_S:=@LN_S@
MKDIR_P:=@MKDIR_P@
STRIP:=@STRIP@
RM_F:=rm -f
RM_RF:=rm -rf
CP:=cp
CP_A:=cp -a

STATIC:=@STATIC@
SHARED:=@SHARED@

COVERAGE:=@COVERAGE@
WANT_NTL:=@WANT_NTL@

WANT_DEPS:=@WANT_DEPS@

WANT_CXX:=@WANT_CXX@

GMP_LIB_PATH:=@GMP_LIB_PATH@
MPFR_LIB_PATH:=@MPFR_LIB_PATH@
BLAS_LIB_PATH:=@BLAS_LIB_PATH@
GC_LIB_PATH:=@GC_LIB_PATH@
NTL_LIB_PATH:=@NTL_LIB_PATH@

CFLAGS:=@CFLAGS@
TESTCFLAGS:=@TESTCFLAGS@
CPPFLAGS:=@CPPFLAGS@ -DBUILDING_FLINT
CPPFLAGS2:=-L$(FLINT_DIR) $(CPPFLAGS)
LIB_CPPFLAGS:=@LIB_CPPFLAGS@
CXXFLAGS:=@CXXFLAGS@
LIBS:=@LIBS@
ifneq ($(WANT_NTL), 0)
LIBS += -lstdc++ -lntl
endif
LIBS2:=-lflint $(LIBS)
PIC_FLAG:=@PIC_FLAG@

LDFLAGS:=@LDFLAGS@
EXTRA_SHARED_FLAGS:=@EXTRA_SHARED_FLAGS@ $(foreach path, $(GMP_LIB_PATH) $(MPFR_LIB_PATH) $(BLAS_LIB_PATH) $(GC_LIB_PATH) $(NTL_LIB_PATH), @WL@-rpath,$(path))
EXE_LDFLAGS:=$(LDFLAGS) $(foreach path, $(ABS_FLINT_DIR) $(GMP_LIB_PATH) $(MPFR_LIB_PATH) $(BLAS_LIB_PATH) $(GC_LIB_PATH) $(NTL_LIB_PATH), @WL@-rpath,$(path))

# Obtain level of parallel
JOBS:=$(filter -j%,$(MAKEFLAGS))
NJOBS:=$(patsubst -j%,%,$(JOBS))

# User may specify -j without specifying the number of jobs
ifneq ($(JOBS),)
ifeq ($(NJOBS),)
# TODO: Create a thing in autoconf in order to obtain the number of available
# cores when -j is specified without any number attached, such as `nproc`.
NJOBS:=8
endif
endif

################################################################################
################################################################################
# files and directories
################################################################################
################################################################################

################################################################################
# configuration files
################################################################################

CFG_FILES :=                                                                \
        $(FLINT_DIR)/config.h           $(SRC_DIR)/flint-config.h           \
        $(FLINT_DIR)/config.log         $(SRC_DIR)/flint.h                  \
        $(SRC_DIR)/fft_tuning.h         $(FLINT_DIR)/flint.pc               \
        $(FLINT_DIR)/Makefile           $(SRC_DIR)/fmpz/fmpz.c              \
        $(SRC_DIR)/gmpcompat.h

################################################################################
# directories
################################################################################

HEADLESS_DIRS := generic_files

HEADER_DIRS :=                                                              \
        thread_pool                     thread_support                      \
                                                                            \
        ulong_extras                                                        \
        long_extras                                                         \
        perm                                                                \
        double_extras   d_vec           d_mat                               \
        mpn_extras                                                          \
        mpf_vec                         mpf_mat                             \
        mpfr_vec                        mpfr_mat                            \
        nmod            nmod_vec        nmod_mat        nmod_poly           \
        fmpz            fmpz_vec        fmpz_mat        fmpz_poly           \
        fmpz_mod        fmpz_mod_vec    fmpz_mod_mat    fmpz_mod_poly       \
        fmpq            fmpq_vec        fmpq_mat        fmpq_poly           \
                                                                            \
        fq              fq_vec          fq_mat          fq_poly             \
        fq_nmod         fq_nmod_vec     fq_nmod_mat     fq_nmod_poly        \
        fq_zech                         fq_zech_mat     fq_zech_poly        \
        fq_default                      fq_default_mat  fq_default_poly     \
        fq_embed                                                            \
        fq_nmod_embed                                                       \
        fq_zech_embed                                                       \
        padic                           padic_mat       padic_poly          \
        qadic                                                               \
                                                                            \
        nmod_poly_factor                fmpz_factor                         \
        fmpz_poly_factor                fmpz_mod_poly_factor                \
        fq_poly_factor                  fq_nmod_poly_factor                 \
        fq_zech_poly_factor             fq_default_poly_factor              \
                                                                            \
        nmod_poly_mat                   fmpz_poly_mat                       \
                                                                            \
        mpoly           nmod_mpoly      fmpz_mpoly      fmpz_mod_mpoly      \
        fmpq_mpoly      fq_nmod_mpoly   fq_zech_mpoly                       \
                                                                            \
        nmod_mpoly_factor               fmpz_mpoly_factor                   \
        fmpz_mod_mpoly_factor           fmpq_mpoly_factor                   \
        fq_nmod_mpoly_factor            fq_zech_mpoly_factor                \
                                                                            \
        fft             @FFT_SMALL@     fmpz_poly_q     fmpz_lll            \
        n_poly          arith           qsieve          aprcl               \
                                                                            \
        nf              nf_elem         qfb                                 \
                                                                            \
        double_interval dlog                                                \
        fmpz_extras     fmpzi                                               \
        bool_mat        partitions                                          \
        mag                                                                 \
        arf             acf             arb             acb                 \
        arb_mat         arb_poly        arb_calc        arb_hypgeom         \
        acb_mat         acb_poly        acb_calc        acb_hypgeom         \
        arb_fmpz_poly   arb_fpwrap                                          \
        acb_dft         acb_elliptic    acb_modular     acb_dirichlet       \
        acb_theta       dirichlet       bernoulli       hypgeom             \
                                                                            \
        gr              gr_generic      gr_vec          gr_mat              \
        gr_poly         gr_mpoly        gr_special                          \
                                                                            \
        calcium                                                             \
        fmpz_mpoly_q                                                        \
        fexpr           fexpr_builtin                                       \
        qqbar                                                               \
        ca              ca_ext          ca_field        ca_vec              \
        ca_poly         ca_mat

DIRS := $(HEADLESS_DIRS) $(HEADER_DIRS)

TEMPLATE_DIRS :=                                                            \
        fq_vec_templates                fq_mat_templates                    \
        fq_poly_templates               fq_poly_factor_templates            \
        fq_embed_templates              fq_templates

BUILD_DIRS :=                                                               \
		$(BUILD_DIR)                                                        \
        $(patsubst %, $(BUILD_DIR)/%, $(DIRS))                              \
        $(patsubst %, $(BUILD_DIR)/%/profile, $(DIRS))                      \
        $(patsubst %, $(BUILD_DIR)/%/test, $(DIRS))                         \
        $(patsubst %, $(BUILD_DIR)/%/tune, $(DIRS))                         \
        $(BUILD_DIR)/examples           $(BUILD_DIR)/profile                \
        $(BUILD_DIR)/test               $(BUILD_DIR)/tune
ifneq ($(WANT_NTL), 0)
BUILD_DIRS +=                                                               \
        $(BUILD_DIR)/interfaces         $(BUILD_DIR)/interfaces/test
endif
ifneq ($(COVERAGE), 0)
BUILD_DIRS +=                                                               \
        $(BUILD_DIR)/coverage
endif

INSTALL_DIRS :=                                                             \
        $(LIBDIR)                       $(INCLUDEDIR)/flint                 \
        $(PKGCONFIGDIR)
ifneq ($(FLINT_DLLLIB),0)
INSTALL_DIRS += $(BINDIR)
endif

################################################################################
# headers
################################################################################

SINGLE_HEADERS :=                                                           \
        flint.h         longlong.h      exception.h     gmpcompat.h         \
        profiler.h      templates.h     flint-config.h  fft_tuning.h        \
        crt_helpers.h                   machine_vectors.h                   \
                                                                            \
        fq_zech_vec.h                                                       \
                                                                            \
        limb_types.h                    mpoly_types.h                       \
        fmpz_types.h                    fmpq_types.h                        \
        nmod_types.h                    fmpz_mod_types.h                    \
        fq_types.h                      fq_nmod_types.h                     \
        fq_zech_types.h                                                     \
        arf_types.h                     acf_types.h                         \
        arb_types.h                     acb_types.h                         \
        NTL-interface.h

HEADERS :=  $(patsubst %,$(SRC_DIR)/%,                                      \
                $(patsubst %,%,$(SINGLE_HEADERS))                           \
                $(patsubst %,%.h,$(HEADER_DIRS))                            \
                $(patsubst %,%.h,$(TEMPLATE_DIRS))                          \
            )

################################################################################
# sources
################################################################################

define xxx_SOURCES
$(1)_SOURCES := $(wildcard $(SRC_DIR)/$(1)/*.c)
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_SOURCES,$(dir))))

# We clear some template files
fmpz_lll_SOURCES := $(filter-out $(SRC_DIR)/fmpz_lll/babai.c $(SRC_DIR)/fmpz_lll/mpf2_lll.c $(SRC_DIR)/fmpz_lll/d_lll.c,$(fmpz_lll_SOURCES))

SOURCES := $(foreach dir,$(DIRS),$($(dir)_SOURCES))

define xxx_PROF_SOURCES
$(1)_PROF_SOURCES := $(wildcard $(SRC_DIR)/$(1)/profile/*.c)
endef
_PROF_SOURCES := $(wildcard $(SRC_DIR)/profile/*.c)
$(foreach dir, $(DIRS), $(eval $(call xxx_PROF_SOURCES,$(dir))))
PROF_SOURCES := $(foreach dir,$(DIRS),$($(dir)_PROF_SOURCES)) $(_PROF_SOURCES)

# FIXME: De-hardcode fq_zech_vec from this.
fq_zech_vec_TEST_SOURCES := $(wildcard $(SRC_DIR)/fq_zech_vec/test/main.c)
define xxx_TEST_SOURCES
$(1)_TEST_SOURCES := $(wildcard $(SRC_DIR)/$(1)/test/main.c)
endef
_TEST_SOURCES := $(wildcard $(SRC_DIR)/test/main.c)
$(foreach dir, $(DIRS), $(eval $(call xxx_TEST_SOURCES,$(dir))))
TEST_SOURCES := $(foreach dir,$(DIRS),$($(dir)_TEST_SOURCES)) $(_TEST_SOURCES) $(fq_zech_vec_TEST_SOURCES)
# NOTE: We do not add CPP files to C files in SOURCES in order to not screw up
# the `patsubst' in the object files.
ifneq ($(WANT_NTL), 0)
interfaces_TEST_SOURCES := $(SRC_DIR)/interfaces/test/t-NTL-interface.cpp
endif

define xxx_TUNE_SOURCES
$(1)_TUNE_SOURCES := $(wildcard $(SRC_DIR)/$(1)/tune/*.c)
endef
_TUNE_SOURCES := $(wildcard $(SRC_DIR)/tune/*.c)
$(foreach dir, $(DIRS), $(eval $(call xxx_TUNE_SOURCES,$(dir))))
TUNE_SOURCES := $(foreach dir,$(DIRS),$($(dir)_TUNE_SOURCES)) $(_TUNE_SOURCES)

EXMP_SOURCES := $(wildcard $(FLINT_DIR)/examples/*.c)

################################################################################
# objects
################################################################################

ifneq ($(STATIC), 0)
define xxx_OBJS
$(1)_OBJS := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.o,$($(1)_SOURCES))
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_OBJS,$(dir))))
OBJS := $(foreach dir, $(DIRS), $($(dir)_OBJS))
endif

################################################################################
# library objects
################################################################################

ifneq ($(SHARED), 0)
define xxx_LOBJS
$(1)_LOBJS := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.lo,$($(1)_SOURCES))
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_LOBJS,$(dir))))
endif

################################################################################
# executables
################################################################################

define xxx_PROFS
$(1)_PROFS := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$($(1)_PROF_SOURCES))
endef
_PROFS := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(_PROF_SOURCES))
$(foreach dir, $(DIRS), $(eval $(call xxx_PROFS,$(dir))))
PROFS := $(foreach dir,$(DIRS),$($(dir)_PROFS)) $(_PROFS)

define xxx_TESTS
$(1)_TESTS := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$($(1)_TEST_SOURCES))
endef
_TESTS := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(_TEST_SOURCES))
$(foreach dir, $(DIRS), $(eval $(call xxx_TESTS,$(dir))))
ifneq ($(WANT_NTL), 0)
interfaces_TESTS := $(BUILD_DIR)/interfaces/test/t-NTL-interface$(EXEEXT)
endif
TESTS := $(foreach dir,$(DIRS),$($(dir)_TESTS)) $(_TESTS) $(interfaces_TESTS)

define xxx_TUNES
$(1)_TUNES := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$($(1)_TUNE_SOURCES))
endef
_TUNES := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(_TUNE_SOURCES))
$(foreach dir, $(DIRS), $(eval $(call xxx_TUNES,$(dir))))
TUNES := $(foreach dir,$(DIRS),$($(dir)_TUNES)) $(_TUNES)

EXMPS := $(patsubst $(FLINT_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(EXMP_SOURCES))

################################################################################
################################################################################
# recipes
################################################################################
################################################################################

################################################################################
# main recipe
################################################################################

all: library

################################################################################
# library
################################################################################

ifneq ($(SHARED), 0)
library: shared
endif
ifneq ($(STATIC), 0)
library: static
endif

ifneq ($(SHARED), 0)
shared: $(FLINT_DIR)/$(FLINT_LIB_FULL)

# The following is to avoid reaching the maximum length of command line
# arguments, mainly present on MinGW.
define xxx_merged_lobj_rule
$(BUILD_DIR)/$(1)_merged.lo: $($(1)_LOBJS) | $(BUILD_DIR)
	@$(LD) -r $($(1)_LOBJS) -o $(BUILD_DIR)/$(1)_merged.lo
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_merged_lobj_rule,$(dir))))
MERGED_LOBJS:=$(foreach dir, $(DIRS),$(BUILD_DIR)/$(dir)_merged.lo)

$(FLINT_DIR)/$(FLINT_LIB_FULL): $(MERGED_LOBJS)
	$(CC) $(CFLAGS) -shared $(EXTRA_SHARED_FLAGS) $(MERGED_LOBJS) -o $(FLINT_LIB_FULL) $(LDFLAGS) $(LIBS)
ifneq ($(FLINT_SOLIB), 0)
	$(LDCONFIG) -n .
endif
	$(RM_F) $(FLINT_LIB)
	$(RM_F) $(FLINT_LIB_MAJOR)
	$(LN_S) $(FLINT_LIB_FULL) $(FLINT_LIB)
	$(LN_S) $(FLINT_LIB_FULL) $(FLINT_LIB_MAJOR)
endif

ifneq ($(STATIC), 0)
static: $(FLINT_DIR)/$(FLINT_LIB_STATIC)

# The following is to avoid reaching the maximum length of command line
# arguments, mainly present on MinGW.
define xxx_merged_obj_rule
$(BUILD_DIR)/$(1)_merged.o: $($(1)_OBJS) | $(BUILD_DIR)
	@$(LD) -r $($(1)_OBJS) -o $(BUILD_DIR)/$(1)_merged.o
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_merged_obj_rule,$(dir))))
MERGED_OBJS:=$(foreach dir, $(DIRS),$(BUILD_DIR)/$(dir)_merged.o)

$(FLINT_DIR)/$(FLINT_LIB_STATIC): $(MERGED_OBJS)
	$(AR) rcs $(FLINT_DIR)/$(FLINT_LIB_STATIC) $(MERGED_OBJS)
endif

################################################################################
# directories
################################################################################

$(BUILD_DIRS) $(INSTALL_DIRS):
	$(MKDIR_P) $@

################################################################################
# inclusions
################################################################################

ifneq ($(WANT_DEPS), 0)

ifeq ($(words $(MAKECMDGOALS)), 0)

-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d

else ifeq ($(words $(MAKECMDGOALS)), 1)

ifeq ($(MAKECMDGOALS), clean)
# Include nothing
else ifeq ($(MAKECMDGOALS), dist)
# Include nothing
else ifeq ($(MAKECMDGOALS), distclean)
# Include nothing
else ifeq ($(MAKECMDGOALS), uninstall)
# Include nothing
else ifeq ($(findstring print-,$(MAKECMDGOALS)), print-)
# Include nothing
else ifeq ($(MAKECMDGOALS), static)
-include $(BUILD_DIR)/*/*.o.d
else ifeq ($(MAKECMDGOALS), shared)
-include $(BUILD_DIR)/*/*.lo.d
else ifeq ($(MAKECMDGOALS), library)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
else ifeq ($(MAKECMDGOALS), install)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
else ifeq ($(MAKECMDGOALS), examples)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/examples/*.d
else ifeq ($(MAKECMDGOALS), profile)
ifdef MOD
$(warning Dependency tracking only set to cover the profile executables of $(MOD).)
-include $(foreach dir, $(MOD), $(BUILD_DIR)/$(dir)/profile/*.d)
else
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/profile/*.d
-include $(BUILD_DIR)/*/profile/*.d
endif
else ifeq ($(MAKECMDGOALS), tests)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
else ifeq ($(MAKECMDGOALS), check)
ifdef MOD
$(warning Dependency tracking only set to cover the test executables of $(MOD).)
-include $(foreach dir, $(MOD), $(BUILD_DIR)/$(dir)/test/*.d)
else
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
endif
else ifeq ($(MAKECMDGOALS), tune)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/tune/*.d
-include $(BUILD_DIR)/*/tune/*.d
else ifeq ($(MAKECMDGOALS), valgrind)
ifdef MOD
$(warning Dependency tracking only set to cover the test executables of $(MOD).)
-include $(foreach dir, $(MOD), $(BUILD_DIR)/$(dir)/test/*.d)
else
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
endif
else
# Cannot recognize the command, so we simply include everything
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
-include $(BUILD_DIR)/profile/*.d
-include $(BUILD_DIR)/*/profile/*.d
-include $(BUILD_DIR)/examples/*.d
endif

else

# Multiple goals. Not currently implemented, so simply include everything.
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
-include $(BUILD_DIR)/profile/*.d
-include $(BUILD_DIR)/*/profile/*.d
-include $(BUILD_DIR)/examples/*.d

endif

endif

DEPFLAGS = -MMD -MP -MF $(@:%=%.d)

################################################################################
# objects
################################################################################

ifneq ($(STATIC), 0)
define xxx_OBJS_rule
$(BUILD_DIR)/$(1)/%.o: $(SRC_DIR)/$(1)/%.c | $(BUILD_DIR)/$(1)
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(CFLAGS) $(CPPFLAGS) $(LIB_CPPFLAGS) -c $$< -o $$@ $$(DEPFLAGS)
endef

$(foreach dir, $(DIRS), $(eval $(call xxx_OBJS_rule,$(dir))))
endif

################################################################################
# library objects
################################################################################

ifneq ($(SHARED), 0)
define xxx_LOBJS_rule
$(BUILD_DIR)/$(1)/%.lo: $(SRC_DIR)/$(1)/%.c | $(BUILD_DIR)/$(1)
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(PIC_FLAG) $(CFLAGS) $(CPPFLAGS) $(LIB_CPPFLAGS) -c $$< -o $$@ $$(DEPFLAGS)
endef

$(foreach dir, $(DIRS), $(eval $(call xxx_LOBJS_rule,$(dir))))
endif

################################################################################
# executables
################################################################################

ifeq ($(SHARED), 0)
$(BUILD_DIR)/profile/%$(EXEEXT): $(SRC_DIR)/profile/%.c $(FLINT_DIR)/$(FLINT_LIB_STATIC) | $(BUILD_DIR)/profile
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/profile/%$(EXEEXT): $(SRC_DIR)/profile/%.c | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/profile
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif

ifeq ($(SHARED), 0)
define xxx_PROFS_rule
$(BUILD_DIR)/$(1)/profile/%$(EXEEXT): $(SRC_DIR)/$(1)/profile/%.c $(FLINT_DIR)/$(FLINT_LIB_STATIC) | $(BUILD_DIR)/$(1)/profile
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
else
define xxx_PROFS_rule
$(BUILD_DIR)/$(1)/profile/%$(EXEEXT): $(SRC_DIR)/$(1)/profile/%.c | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/$(1)/profile
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
endif

$(foreach dir, $(DIRS), $(eval $(call xxx_PROFS_rule,$(dir))))

ifeq ($(SHARED), 0)
$(BUILD_DIR)/test/%$(EXEEXT): $(SRC_DIR)/test/%.c $(FLINT_DIR)/$(FLINT_LIB_STATIC) | $(BUILD_DIR)/test
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/test/%$(EXEEXT): $(SRC_DIR)/test/%.c | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/test
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif

ifeq ($(SHARED), 0)
define xxx_TESTS_rule
$(BUILD_DIR)/$(1)/test/%$(EXEEXT): $(SRC_DIR)/$(1)/test/%.c $(FLINT_DIR)/libflint.a | $(BUILD_DIR)/$(1)/test
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
else
define xxx_TESTS_rule
$(BUILD_DIR)/$(1)/test/%$(EXEEXT): $(SRC_DIR)/$(1)/test/%.c | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/$(1)/test
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
endif

$(foreach dir, $(DIRS), $(eval $(call xxx_TESTS_rule,$(dir))))

ifneq ($(WANT_NTL), 0)
ifeq ($(SHARED), 0)
$(BUILD_DIR)/interfaces/test/t-NTL-interface$(EXEEXT): $(SRC_DIR)/interfaces/test/t-NTL-interface.cpp $(FLINT_DIR)/$(FLINT_LIB_STATIC) | $(BUILD_DIR)/interfaces/test
	@echo "  CXX $(@:$(BUILD_DIR)/%=%)"
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/interfaces/test/t-NTL-interface$(EXEEXT): $(SRC_DIR)/interfaces/test/t-NTL-interface.cpp | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/interfaces/test
	@echo "  CXX $(@:$(BUILD_DIR)/%=%)"
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif
endif

ifeq ($(SHARED), 0)
$(BUILD_DIR)/tune/%$(EXEEXT): $(SRC_DIR)/tune/%.c $(FLINT_DIR)/$(FLINT_LIB_STATIC) | $(BUILD_DIR)/tune
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/tune/%$(EXEEXT): $(SRC_DIR)/tune/%.c | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/tune
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif

ifeq ($(SHARED), 0)
define xxx_TUNES_rule
$(BUILD_DIR)/$(1)/tune/%$(EXEEXT): $(SRC_DIR)/$(1)/tune/%.c $(FLINT_DIR)/$(FLINT_LIB_STATIC) | $(BUILD_DIR)/$(1)/tune
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
else
define xxx_TUNES_rule
$(BUILD_DIR)/$(1)/tune/%$(EXEEXT): $(SRC_DIR)/$(1)/tune/%.c | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/$(1)/tune
	@echo "  CC  $$(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
endif

$(foreach dir, $(DIRS), $(eval $(call xxx_TUNES_rule,$(dir))))

ifeq ($(SHARED), 0)
$(BUILD_DIR)/examples/%$(EXEEXT): $(FLINT_DIR)/examples/%.c $(FLINT_DIR)/$(FLINT_LIB_STATIC) | $(BUILD_DIR)/examples
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/examples/%$(EXEEXT): $(FLINT_DIR)/examples/%.c | $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BUILD_DIR)/examples
	@echo "  CC  $(@:$(BUILD_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif

################################################################################
# examples
################################################################################

examples: library $(EXMPS)

%_EXMP_RUN: %
	@$(FLINT_DIR)/dev/check_examples.sh $(patsubst $(BUILD_DIR)/examples/%,%,$<) $(BUILD_DIR)/examples

checkexamples: examples $(EXMPS:%=%_EXMP_RUN)

################################################################################
# profiling
################################################################################

ifdef MOD
profile: library $(foreach dir, $(MOD), $($(dir)_PROFS))
else
profile: library $(PROFS)
endif

################################################################################
# tests
################################################################################

tests: library $(TESTS)

# NOTE: File has to be located in another directory in order for this to work.
%_TEST_RUN: %
	@$<

# Parallel running of same test file
ifneq ($(NJOBS),)
number_generator=$(words $2) $(if $(word $1,$2),,$(call number_generator,$1,w $2))
THREAD_LIST:=$(call number_generator,$(NJOBS),w)

define xxx_test_run_parallel
%_TEST_RUN_$(1): %
	@$$< --numthreads=$(NJOBS) --thread=$(1)
endef
$(foreach num, $(THREAD_LIST), $(eval $(call xxx_test_run_parallel,$(num))))
endif

ifdef PYTHON
ifeq ($(findstring linux,$(HOST_OS)),linux)
check: library
	@LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(ABS_FLINT_DIR) python3 $(SRC_DIR)/python/flint_ctypes.py
else
check: library
	@python3 $(SRC_DIR)/python/flint_ctypes.py
endif
else ifdef MOD
ifeq ($(NJOBS),)
check: library $(patsubst %,%_TEST_RUN,$(foreach dir, $(MOD), $($(dir)_TESTS)))
else
check: library $(foreach x_test,$(patsubst %,%_TEST_RUN,$(foreach dir,$(MOD),$($(dir)_TESTS))),$(foreach num,$(THREAD_LIST),$(x_test)_$(num)))
endif
else
check: library $(TESTS:%=%_TEST_RUN)
endif

################################################################################
# tuning
################################################################################

tune: library $(TUNES)

################################################################################
# valgrind
################################################################################

%_VALGRIND_RUN: %
	valgrind --track-origins=yes --leak-check=full --show-reachable=yes --log-file="$*.valgrind" $<

ifdef MOD
valgrind: library $(patsubst %,%_VALGRIND_RUN,$(foreach dir, $(MOD), $($(dir)_TESTS)))
else
valgrind: library $(TESTS:%=%_VALGRIND_RUN)
endif

################################################################################
# coverage
################################################################################

ifneq ($(COVERAGE), 0)
coverage: | $(BUILD_DIR)/coverage
	lcov --capture  --exclude "*test/t-*.c" --exclude "*test/main.c" --exclude "/usr/*" --directory $(BUILD_DIR) --output-file $(BUILD_DIR)/coverage/coverage.info

# TODO: Add -j $(NJOBS) and --omit-lines "flint_throw" --omit-lines '^}$$' to
# lcov flags when next Ubuntu LTS ships lcov v2.0.0+.

coverage_html: coverage
	genhtml $(NJOBS) $(BUILD_DIR)/coverage/coverage.info --output-directory $(BUILD_DIR)/coverage
endif

################################################################################
# clean
################################################################################

clean:
	$(RM_F) $(FLINT_DIR)/$(FLINT_LIB)
	$(RM_F) $(FLINT_DIR)/$(FLINT_LIB_MAJOR)
	$(RM_F) $(FLINT_DIR)/$(FLINT_LIB_FULL)
ifneq ($(FLINT_DLLLIB), 0)
	$(RM_F) $(FLINT_DIR)/$(FLINT_IMPLIB)
endif
	$(RM_F) $(FLINT_DIR)/$(FLINT_LIB_STATIC)
	$(RM_RF) $(BUILD_DIR)

distclean: clean
	$(RM_F) $(CFG_FILES)

################################################################################
# install and uninstall
################################################################################

install: library | $(INSTALL_DIRS)
	$(CP) flint.pc $(PKGCONFIGDIR)/flint.pc
ifneq ($(SHARED), 0)
ifneq ($(FLINT_DLLLIB),0)
	$(CP_A) $(FLINT_DIR)/$(FLINT_LIB) $(BINDIR)
	$(CP_A) $(FLINT_DIR)/$(FLINT_LIB_MAJOR) $(BINDIR)
	$(CP_A) $(FLINT_DIR)/$(FLINT_LIB_FULL) $(BINDIR)
	$(CP) $(FLINT_DIR)/$(FLINT_IMPLIB) $(LIBDIR)
else
	$(CP_A) $(FLINT_DIR)/$(FLINT_LIB) $(LIBDIR)
	$(CP_A) $(FLINT_DIR)/$(FLINT_LIB_MAJOR) $(LIBDIR)
	$(CP_A) $(FLINT_DIR)/$(FLINT_LIB_FULL) $(LIBDIR)
endif
ifneq ($(FLINT_DYLIB),0)
	install_name_tool -id $(LIBDIR)/$(FLINT_LIB_FULL) $(LIBDIR)/$(FLINT_LIB)
endif
endif
ifneq ($(STATIC), 0)
	$(CP) $(FLINT_DIR)/$(FLINT_LIB_STATIC) $(LIBDIR)
endif
	$(CP) $(HEADERS) $(INCLUDEDIR)/flint

uninstall:
	$(RM_F) $(PKGCONFIGDIR)/flint.pc
ifneq ($(FLINT_DLLLIB),0)
	$(RM_F) $(BINDIR)/$(FLINT_LIB)
	$(RM_F) $(BINDIR)/$(FLINT_LIB_MAJOR)
	$(RM_F) $(BINDIR)/$(FLINT_LIB_FULL)
	$(RM_F) $(LIBDIR)/$(FLINT_IMPLIB)
else
	$(RM_F) $(LIBDIR)/$(FLINT_LIB)
	$(RM_F) $(LIBDIR)/$(FLINT_LIB_MAJOR)
	$(RM_F) $(LIBDIR)/$(FLINT_LIB_FULL)
endif
	$(RM_F) $(LIBDIR)/$(FLINT_LIB_STATIC)
	$(RM_RF) $(INCLUDEDIR)/flint

################################################################################
# regenerate part of the build system of needed
################################################################################

ifneq ($(MAINTAINER_MODE),no)  # disable this for releases?
ifneq ($(shell command -v autoconf 2> /dev/null),)
configure: configure.ac
	@echo "Running autoconf"
	@autoconf
else
configure: configure.ac
	$(warning autoconf not available, proceeding with stale configure)
endif
endif

config.status: configure
	./config.status --recheck

Makefile: Makefile.in config.status
	./config.status $@

flint.pc: flint.pc.in config.status
	./config.status $@

src/flint.h: src/flint.h.in config.status
	./config.status $@

libtool: config.status
	./config.status $@

src/fft_tuning.h: @FFT_TUNING_IN@ config.status
	./config.status $@

src/fmpz/fmpz.c: @FMPZ_C_IN@ config.status
	./config.status $@

src/gmpcompat.h: src/@GMPCOMPAT_H_IN@ config.status
	./config.status $@

################################################################################
# maintainer stuff
################################################################################

dist:
	dev/make_dist.sh $(FLINT_VERSION)

################################################################################
# debugging
################################################################################

print-%:
	@echo "$*=$($*)"

.PHONY: all library shared static examples checkexamples profile tests check tune valgrind clean distclean install uninstall dist %_TEST_RUN %_VALGRIND_RUN print-% coverage coverage_html
