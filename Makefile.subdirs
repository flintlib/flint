ifeq ($(strip $(VERBOSE)),)
	QUIET_CC  = @echo '   ' CC  ' ' $(subst $(BUILD_DIR)/,,$@);
	QUIET_CXX = @echo '   ' CXX ' ' $(subst $(BUILD_DIR)/,,$@);
else
	QUIET_CC  = 
	QUIET_CXX = 
endif

ifeq ($(WANTDEPS), 1)
	DEPFLAGS1 = -MMD -MP -MF $@.d -MT "$@" -MT "$@.d";
	DEPFLAGS2 = -MMD -MP -MF "$(BUILD_DIR)/$(MOD_DIR)/$(MOD_DIR)_$*.d" -MT "$(BUILD_DIR)/$(MOD_DIR)/$(MOD_DIR)_$*.d" -MT "$@";
	DEPFLAGS3 = -MMD -MP -MF "$(BUILD_DIR)/$(MOD_DIR)/$*.d" -MT "$(BUILD_DIR)/$(MOD_DIR)/$*.d" -MT "$@";
else
	DEPFLAGS1 =
	DEPFLAGS2 =
	DEPFLAGS3 =
endif

AT=@
comma=,

SOURCES = $(wildcard *.c)

HEADERS = $(wildcard ../*.h)
TEST_HEADERS = $(wildcard *.h)

OBJS = $(patsubst %.c, $(BUILD_DIR)/$(MOD_DIR)/%.o, $(SOURCES))

LOBJS = $(patsubst %.c, $(BUILD_DIR)/$(MOD_DIR)/%.lo, $(SOURCES))
MOD_LOBJ = $(BUILD_DIR)/$(MOD_DIR).lo

ifndef USER_SET_TESTS
	TEST_SOURCES = $(wildcard test/*.c)
	TESTXX_SOURCES = $(wildcard test/*.cpp)
else
	TL = $(subst $(comma), ,$(USER_SET_TESTS))
	TEST_SOURCES = $(foreach test, $(TL), $(wildcard test/t-$(test).c))
	TESTXX_SOURCES = $(foreach test, $(TL), $(wildcard test/t-$(test).cpp))
endif

PROF_SOURCES = $(wildcard profile/*.c)

TUNE_SOURCES = $(wildcard tune/*.c)

TESTS = $(patsubst %.c,$(BUILD_DIR)/$(MOD_DIR)/%$(EXEEXT), $(TEST_SOURCES)) \
        $(patsubst %.cpp,$(BUILD_DIR)/$(MOD_DIR)/%$(EXEEXT), $(TESTXX_SOURCES))

TESTS_RUN = $(patsubst %, %_RUN, $(TESTS))

VALGRIND_RUN = $(patsubst %, %_VALGRIND_RUN, $(TESTS))

PROFS = $(patsubst %.c, $(BUILD_DIR)/$(MOD_DIR)/%$(EXEEXT), $(PROF_SOURCES))

all: shared static

shared: $(MOD_LOBJ)

static: $(OBJS)

profile: $(PROFS)

-include $(patsubst %, %.d, $(PROFS))

$(BUILD_DIR)/$(MOD_DIR)/profile/%$(EXEEXT): profile/%.c
	$(QUIET_CC) $(CC) $(CFLAGS) -std=gnu99 $(INCS) $< -o $@ $(LIBS) $(DEPFLAGS1)

tune: $(TUNE_SOURCES) $(HEADERS)
	$(AT)$(foreach prog, $(TUNE_SOURCES), $(CC) $(CFLAGS) $(INCS) $(prog) -o $(BUILD_DIR)/$(MOD_DIR)/$(patsubst %.c,%,$(prog))$(EXEEXT) $(LIBS) || exit $$?;)

-include $(OBJS:.o=.d)

$(BUILD_DIR)/$(MOD_DIR)/%.o: %.c
	$(QUIET_CC) $(CC) $(CFLAGS) $(INCS) -c $< -o $@ $(DEPFLAGS2)

$(MOD_LOBJ): $(LOBJS)
	$(QUIET_CC) $(CC) $(ABI_FLAG) -r $^ -o $@ -nostdlib

-include $(LOBJS:.lo=.d)

$(BUILD_DIR)/$(MOD_DIR)/%.lo: %.c
	$(QUIET_CC) $(CC) $(PIC_FLAG) $(CFLAGS) $(INCS) -c $< -o $@ $(DEPFLAGS3)

clean:
	rm -rf $(BUILD_DIR) $(MOD_LOBJ)

tests: $(TESTS)

check: tests $(TESTS_RUN)

valgrind: tests $(VALGRIND_RUN)

-include $(patsubst %, %.d, $(TESTS))

ifeq ($(FLINT_SHARED), 0)
$(BUILD_DIR)/$(MOD_DIR)/test/%$(EXEEXT): $(FLINT_DIR)/libflint.a
endif

$(BUILD_DIR)/$(MOD_DIR)/test/%$(EXEEXT): test/%.c
	$(QUIET_CC) $(CC) $(CFLAGS) $(INCS) $(LDFLAGS) $< -o $@ $(LIBS) $(DEPFLAGS1)

$(BUILD_DIR)/$(MOD_DIR)/test/%$(EXEEXT): test/%.cpp
	$(QUIET_CXX) $(CXX) $(CXXFLAGS) $(INCS) $(LDFLAGS) $< -o $@ $(LIBS) $(DEPFLAGS1)

%_RUN: %
	@$<

%_VALGRIND_RUN: %
	valgrind --track-origins=yes --leak-check=full --show-reachable=yes --log-file="$*.valgrind" $<

print-%:
	@echo '$*=$($*)'

.PHONY: profile tune clean check tests all shared static valgrind %_RUN %_VALGRIND_RUN
