name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - flint-*

concurrency:
  # group by workflow and ref; the last slightly strange component ensures that for pull
  # requests, we limit to 1 concurrent job, but for the main branch we don't
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/main' || github.run_number }}
  # Cancel intermediate builds, but only if it is a pull request build.
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  ##############################################################################
  # ubuntu, gcc, code coverage
  ##############################################################################
  ubuntu-codecoverage:
    name: Ubuntu GCC, Code Coverage (x2)

    runs-on: ubuntu-latest

    env:
      CC: "gcc"
      FLINT_TEST_MULTIPLIER: "2"

    steps:
      - uses: actions/checkout@v4

      - name: "Setup"
        run: |
          sudo apt-get install -y libgmp-dev libmpfr-dev autoconf libtool-bin

          # Install lcov 2.0
          mkdir lcov
          cd lcov
          wget https://github.com/linux-test-project/lcov/releases/download/v2.0/lcov-2.0.tar.gz
          tar -xf lcov-2.0.tar.gz
          cd lcov-2.0/
          sudo make install

          # Install lcov dependencies
          sudo cpan -T Capture::Tiny DateTime Digest::MD5 File::Spec JSON::XS Memory::Process Module::Load::Conditional Scalar::Util Time::HiRes

          # Check versions
          gcc --version
          make --version
          autoconf --version
          libtool --version
          lcov --version
          python3 --version
          echo "MAKE=make -j$(expr $(nproc) + 1) --output-sync=target" >> $GITHUB_ENV

      - name: "Configure"
        run: |
          ./bootstrap.sh
          ./configure \
            CC=${CC} \
            --enable-avx2 \
            --disable-static \
            --enable-coverage

      - name: "Compile library"
        run: |
          $MAKE
          ldd libflint.so

      - name: "Compile tests"
        run: |
          $MAKE tests

      - name: "Check"
        run: |
          $MAKE check

      - name: "Check Python"
        run: |
          $MAKE check PYTHON=1

      - name: "Gather coverage data"
        run: |
          # NOTE: When Ubuntu LTS ships lcov v2.0.0+, change this section to
          # `$MAKE coverage'.
          mkdir build/coverage
          lcov -j $(expr $(nproc) + 1) --capture --omit-lines "flint_throw" --omit-lines '^}$' --exclude "*test/t-*.c" --exclude "*test/main.c" --exclude "/usr/*" --directory build --output-file build/coverage/coverage.info

      - name: "Upload coverage data"
        uses: codecov/codecov-action@v4
        if: github.repository == 'flintlib/flint'
        with:
          files: build/coverage/coverage.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}



  ##############################################################################
  # ubuntu gcc with assert
  ##############################################################################
  ubuntu-gcc-assert:
    name: Ubuntu GCC with NTL (assert, x1)

    runs-on: ubuntu-latest

    env:
      CC: "gcc"
      FLINT_TEST_MULTIPLIER: "1"

    steps:
      - uses: actions/checkout@v4

      - name: "Setup"
        run: |
          sudo apt-get install -y libgmp-dev libmpfr-dev libntl-dev autoconf libtool-bin
          gcc --version
          make --version
          autoconf --version
          libtool --version
          echo "MAKE=make -j$(expr $(nproc) + 1) --output-sync=target" >> $GITHUB_ENV

      - name: "Configure"
        run: |
          ./bootstrap.sh
          ./configure \
            CC=${CC} \
            --with-ntl \
            --enable-assert \
            --disable-static \
            --disable-debug

      - name: "Compile library"
        run: |
          $MAKE
          ldd libflint.so

      - name: "Compile tests"
        run: |
          $MAKE tests

      - name: "Check"
        run: |
          $MAKE check



  ##############################################################################
  # macos (M1) with clang
  ##############################################################################
  macos-m1:
    name: macOS-M1, Clang (x1)

    runs-on: macos-14

    env:
      FLINT_TEST_MULTIPLIER: "1"

    steps:
      - uses: actions/checkout@v4

      - name: "Setup"
        run: |
          brew install make
          brew install gmp
          brew install mpfr
          brew install autoconf
          brew install libtool
          brew install automake
          $(brew --prefix llvm@15)/bin/clang --version
          gmake --version
          autoconf --version
          echo "MAKE=gmake -j$(expr $(nproc) + 1) -l 10 --output-sync=target" >> $GITHUB_ENV

      - name: "Configure"
        run: |
          ./bootstrap.sh
          ./configure \
            CC=$(brew --prefix llvm@15)/bin/clang \
            --with-gmp=$(brew --prefix) \
            --with-mpfr=$(brew --prefix) \
            --disable-static \
            --disable-debug

      - name: "Compile library"
        run: |
          $MAKE

      - name: "Compile tests"
        run: |
          $MAKE tests

      - name: "Check"
        run: |
          $MAKE check



  #############################################################################
  # ubuntu with clang
  #############################################################################
  ubuntu-clang:
    name: Ubuntu Clang with examples (x0.5)

    runs-on: ubuntu-latest

    env:
      LOCAL: ${{ github.workspace }}/local
      LDFLAGS: "-Wl,-rpath,$LOCAL/lib"
      CC: "clang"
      FLINT_TEST_MULTIPLIER: "0.5"

    steps:
      - uses: actions/checkout@v4

      - name: "Setup"
        run: |
          sudo apt-get install -y libgmp-dev libmpfr-dev autoconf libtool-bin perl
          clang --version
          make --version
          autoconf --version
          libtool --version
          perl --version
          echo "MAKE=make -j$(expr $(nproc) + 1) --output-sync=target" >> $GITHUB_ENV

      - name: "Configure"
        run: |
          ./bootstrap.sh
          ./configure \
            CC=${CC} \
            --disable-static \
            --disable-debug

      - name: "Compile library"
        run: |
          $MAKE
          ldd libflint.so

      - name: "Compile tests"
        run: |
          $MAKE tests

      - name: "Check"
        run: |
          $MAKE check

      - name: "Compile examples"
        run: |
          $MAKE examples

      - name: "Check examples"
        run: |
          $MAKE checkexamples



  ##############################################################################
  # msvc
  ##############################################################################
  msvc:
    name: MSVC (x0.5)

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: "Setup cache for dependencies"
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: "Install dependencies"
        run: |
          vcpkg install gmp mpfr pthreads --binarysource="clear;x-gha,readwrite"

      - name: "Setup MSVC"
        uses: ilammy/msvc-dev-cmd@v1.13.0
        with:
          arch: x86_64

      - name: "Configure"
        run: |
          mkdir build
          cd build
          # For single build, we need atomics
          cmake `
            -G "Ninja" `
            -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DCMAKE_C_FLAGS="/wd4018 /wd4146 /wd4244 /wd4267 /wd4305 /wd4996 /experimental:c11atomics" `
            -DBUILD_TESTING=ON `
            -DCMAKE_BUILD_TYPE=Release `
            ..

      - name: "Build"
        run: |
          cd build
          # NOTE: Number of threads for Github's CI runners are 4.
          cmake --build . -j5

      - name: "Check"
        run: |
          cd build
          set "FLINT_TEST_MULTIPLIER=0.5"
          ctest -j5 --output-on-failure --timeout 150



  ##############################################################################
  # alpine linux, musl, 32-bit (assert)
  ##############################################################################
  alpine-32bit:
    name: Alpine Linux, musl, 32-bit (assert, x1)

    runs-on: ubuntu-latest

    env:
      CC: "gcc"
      FLINT_TEST_MULTIPLIER: "1"

    steps:
      - uses: actions/checkout@v4

      - name: "Setup latest Alpine Linux"
        uses: jirutka/setup-alpine@v1
        with:
          arch: x86
          branch: edge
          packages: >
            gmp-dev
            mpfr-dev
            gcc
            musl-dev
            make
            autoconf
            automake
            libtool

      - name: "Setup"
        run: |
          gcc --version
          make --version
          autoconf --version
          libtool --version
          echo "MAKE=make -j$(expr $(nproc) + 1) --output-sync=target" >> $GITHUB_ENV
        shell: alpine.sh {0}

      - name: "Configure"
        run: |
          ./bootstrap.sh
          ./configure \
            CC=${CC} \
            --enable-assert \
            --disable-static \
            --disable-debug
        shell: alpine.sh {0}

      - name: "Compile library"
        run: |
          $MAKE
        shell: alpine.sh {0}

      - name: "Compile tests"
        run: |
          $MAKE tests
        shell: alpine.sh {0}

      - name: "Check"
        run: |
          $MAKE check
        shell: alpine.sh {0}
