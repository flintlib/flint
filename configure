#!/bin/sh

# (C) 2007, Robert Bradshaw, William Hart, William Stein, Michael Abshoff
# (C) 2011, William Hart
# (C) 2012, William Hart, Jean-Pierre Flori, Thomas DuBuisson
# (C) 2012, Jan Engelhardt

PREFIX="/usr/local"
GMP_DIR="/usr/local"
MPFR_DIR="/usr/local"
NTL_DIR="/usr/local"
BLAS_DIR="/usr/local"
WANT_NTL=0
WANT_BLAS=0
SHARED=1
STATIC=1
TLS=1
PTHREAD=1
REENTRANT=0
BUILD=

usage()
{
   echo "Usage: ./configure <options> <args>"
   echo "   where <options> may be"
   echo "     -h display usage information"
   echo "   where <args> may be:"
   echo "     --prefix=<path>      Specify path to installation location (default: /usr/local)"
   echo "     --with-mpir=<path>   Specify location of MPIR (default: /usr/local)"
   echo "     --with-gmp=<path>    Specify location of GMP (default: /usr/local)"
   echo "     --with-mpfr=<path>   Specify location of MPFR (default: /usr/local)"
   echo "     --with-blas[=<path>] Use BLAS and specify its location (default: /usr/local)"
   echo "     --without-blas       Do not use BLAS (default)"
   echo "     --with-ntl[=<path>]  Build NTL interface and specify its location (default: /usr/local)"
   echo "     --without-ntl        Do not build NTL interface (default)"
   echo "     --build=arch-os      Specify architecture/OS combination rather than use values from uname -m/-s"
   echo "     --enable-shared      Build a shared library (default)"
   echo "     --disable-shared     Do not build a shared library"
   echo "     --enable-static      Build a static library (default)"
   echo "     --disable-static     Do not build a static library"
   echo "     --single             Faster [non-reentrant if tls or pthread not used] version of library (default)"
   echo "     --reentrant          Build fully reentrant [with or without tls, with pthread] version of library"
   echo "     --enable-pthread     Use pthread (default)"
   echo "     --disable-pthread    Do not use pthread"
   echo "     --enable-tls         Use thread-local storage (default)"
   echo "     --disable-tls        Do not use thread-local storage"
   echo "     CC=<name>            Use the C compiler with the given name (default: gcc)"
   echo "     CXX=<name>           Use the C++ compiler with the given name (default: g++)"
   echo "     AR=<name>            Use the AR library builder with the given name (default: ar)"
   echo "     CFLAGS=<flags>       Pass the given flags to the compiler"
   echo "     ABI=[32|64]          Tell the compiler to use given ABI (default: empty)"
}

while [ "$1" != "" ]; do
   PARAM=`echo $1 | sed 's/=.*//'`
   VALUE=`echo $1 | sed 's/[^=]*//; s/=//'`
   case "$PARAM" in
      -h|--help)
         usage
         exit 0
         ;;
      --with-mpir|--with-gmp)
         GMP_DIR="$VALUE"
         ;;
      --with-mpfr)
         MPFR_DIR="$VALUE"
         ;;
      --with-ntl)
         WANT_NTL=1
         if [ ! -z "$VALUE" ]; then
            NTL_DIR="$VALUE"
         fi
         ;;
      --without-ntl)
         WANT_NTL=0
         ;;
      --with-blas)
         WANT_BLAS=1
         if [ ! -z "$VALUE" ]; then
            BLAS_DIR="$VALUE"
         fi
         ;;
      --without-blas)
         WANT_BLAS=0
         ;;
      --build)
         BUILD="$VALUE"
         ;;
      --prefix)
         PREFIX="$VALUE"
         ;;
      --enable-shared)
         SHARED=1
         ;;
      --disable-shared)
         SHARED=0
         ;;
      --enable-static)
         STATIC=1
         ;;
      --disable-static)
         STATIC=0
         ;;
      --single)
         REENTRANT=0
         ;;
      --reentrant)
         REENTRANT=1
         ;;
      --enable-pthread)
         PTHREAD=1
         ;;
      --disable-pthread)
         PTHREAD=0
         ;;
      --enable-tls)
         TLS=1
         ;;
      --disable-tls)
         TLS=0
         ;;
      AR)
         AR="$VALUE"
         ;;
      CC)
         CC="$VALUE"
         ;;
      CXX)
         CXX="$VALUE"
         ;;
      CFLAGS)
         CFLAGS="$VALUE"
         ;;
      ABI)
         ABI="$VALUE"
         ;;
      *)
         usage
         exit 1
         ;;
   esac
   shift
done

#find dependencies

if [ -d "${GMP_DIR}/lib" ]; then
   GMP_LIB_DIR="${GMP_DIR}/lib"
   GMP_INC_DIR="${GMP_DIR}/include"
elif [ -d "${GMP_DIR}/lib64" ]; then
   GMP_LIB_DIR="${GMP_DIR}/lib64"
   GMP_INC_DIR="${GMP_DIR}/include"
elif [ -d "${GMP_DIR}/.libs" ]; then
   GMP_LIB_DIR="${GMP_DIR}/.libs"
   GMP_INC_DIR="${GMP_DIR}"
else
   echo "Invalid GMP directory"
   exit 1
fi
LIB_DIRS="${LIB_DIRS} ${GMP_LIB_DIR}"
INC_DIRS="${INC_DIRS} ${GMP_INC_DIR}"
LIBS="-lgmp"

if [ -d "${MPFR_DIR}/lib" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/lib"
   MPFR_INC_DIR="${MPFR_DIR}/include"
elif [ -d "${MPFR_DIR}/lib64" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/lib64"
   MPFR_INC_DIR="${MPFR_DIR}/include"
elif [ -d "${MPFR_DIR}/.libs" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/.libs"
   MPFR_INC_DIR="${MPFR_DIR}"
elif [ -d "${MPFR_DIR}/src/.libs" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/src/.libs"
   MPFR_INC_DIR="${MPFR_DIR}/src"
else
   echo "Invalid MPFR directory"
   exit 1
fi
LIB_DIRS="${LIB_DIRS} ${MPFR_LIB_DIR}"
INC_DIRS="${INC_DIRS} ${MPFR_INC_DIR}"

#configure extra libraries

if [ "$WANT_NTL" = "1" ]; then
   if [ -d "${NTL_DIR}/lib" ]; then
      NTL_LIB_DIR="${NTL_DIR}/lib"
      NTL_INC_DIR="${NTL_DIR}/include"
   elif [ -d "${NTL_DIR}/lib64" ]; then
      NTL_LIB_DIR="${NTL_DIR}/lib64"
      NTL_INC_DIR="${NTL_DIR}/include"
   else
      echo "Invalid NTL directory"
      exit 1
   fi
   EXTRA_INC_DIRS="${EXTRA_INC_DIRS} ${NTL_INC_DIR}"
   EXTRA_LIB_DIRS="${EXTRA_LIB_DIRS} ${NTL_LIB_DIR}"
   EXTRA_LIBS="${EXTRA_LIBS} -lntl"
fi

if [ "$WANT_BLAS" = "1" ]; then
   if [ -d "${BLAS_DIR}" ]; then
      BLAS_LIB_DIR="${BLAS_DIR}"
      BLAS_INC_DIR="${BLAS_DIR}"
   else
      echo "Invalid BLAS directory"
      exit 1
   fi
   EXTRA_INC_DIRS="${EXTRA_INC_DIRS} ${BLAS_INC_DIR}"
   EXTRA_LIB_DIRS="${EXTRA_LIB_DIRS} ${BLAS_LIB_DIR}"
   EXTRA_LIBS="${EXTRA_LIBS} -lopenblas"
fi
CONFIG_BLAS="#define HAVE_BLAS ${WANT_BLAS}"

# defaults for CC, CXX and AR

if [ -z "$CC" ]; then
   CC=gcc
fi

if [ -z "$CXX" ]; then
   CXX=g++
fi

if [ -z "$AR" ]; then
   AR=ar
fi

#handle reentrant flag

if [ "$REENTRANT" = "1" ]; then
   cp fmpz/link/fmpz_reentrant.c fmpz/fmpz.c
   cp fmpz-conversions-reentrant.in fmpz-conversions.h
else
   cp fmpz/link/fmpz_single.c fmpz/fmpz.c
   cp fmpz-conversions-single.in fmpz-conversions.h
fi

# Architecture handler

KERNEL=`uname`

if [ -z "$BUILD" ]; then
   ARCH=`uname -m`

   if [ "$(uname | cut -d_ -f1)" = "MINGW32" ]; then
      OS="MINGW32"
   elif [ "$(uname | cut -d_ -f1)" = "MINGW64" ]; then
      OS="MINGW64"
   elif [ "$(uname | cut -d_ -f1)" = "CYGWIN" ]; then
      OS="CYGWIN"
   else
      OS=`uname -s`
   fi
else
   ARCH=`echo "$BUILD" | cut -d- -f1`
   OS=`echo "$BUILD" | cut -d- -f2`
fi

case "$ARCH" in
   x86_64 | amd64)
      MACHINE="x86_64";;
   x86 | i*86 | pc)
      MACHINE="x86";;
   ia64)
      MACHINE="ia64";;
   sparc | sun4*)
      MACHINE="sparc";;
   sparc64)
      MACHINE="sparc64";;
   ppc64 | powerpc64)
      MACHINE="ppc64";;
   ppc | powerpc | [P|p]ower*)
      MACHINE="ppc";;
   *)
      MACHINE="unknown";;
esac

#ABI flag
if [ "$ABI" = "32" ]; then
   ABI_FLAG="-m32"
   case "$MACHINE" in
      x86_64)
         MACHINE="x86";;
      sparc64)
         MACHINE="sparc";;
      ppc64)
         MACHINE="ppc";;
      *)
         ;;
   esac
elif [ "$ABI" = "64" ]; then
   ABI_FLAG="-m64"
   if [ "$MACHINE" = "sparc" ]; then
      MACHINE="sparc64"
   fi
fi

echo "Configuring...${MACHINE}-${OS}"

#name for FLINT shared library

if [ -z "$FLINT_LIB" ]; then
   case "$OS" in
      Darwin)
         FLINT_LIB="libflint.dylib";;
      CYGWIN | MINGW*)
         FLINT_LIB="libflint.dll";;
      *)
         FLINT_LIB="libflint.so";;
   esac
fi

#don't build both shared and static lib on MinGW and Cygwin

case "$OS" in
   CYGWIN | MINGW*)
      if [ "$STATIC" = "1" ] && [ "$SHARED" = "1" ]; then
         echo "Building both static and shared versions of MPIR/GMP on $OS is currently"
         echo "unsupported, and so is it for MPFR and FLINT."
         echo "You should pass --disable--shared or --disable-static to configure"
         echo "depending on the versions of MPIR/GMP and MPFR you built."
         exit 1
      fi
      ;;
   *)
      ;;
esac

#select fft_tuning parameters

case "$MACHINE" in
   x86_64 | ia64 | sparc64 | ppc64)
      cp fft_tuning64.in fft_tuning.h;;
   *)
      cp fft_tuning32.in fft_tuning.h;;
esac

#test for popcnt flag and set needed CFLAGS

mkdir -p build
rm -f build/test-popcnt > /dev/null 2>&1
MSG="Testing __builtin_popcountl..."
([ -x /bin/echo ] && /bin/echo -n "$MSG") || echo "$MSG"
echo "int main(int argc, char ** argv) {return __builtin_popcountl(argc) == 100;}" > build/test-popcnt.c
$CC build/test-popcnt.c -o ./build/test-popcnt > /dev/null 2>&1
if [ $? -eq 0 ]; then
   echo "yes"
   CONFIG_POPCNT_INTRINSICS="#define POPCNT_INTRINSICS"

   if [ "$MACHINE" = "x86_64" ]; then
      MSG="Testing native popcount..."
      ([ -x /bin/echo ] && /bin/echo -n "$MSG") || echo "$MSG"
      touch build/test-popcnt.c
      rm build/test-popcnt
      $CC -mpopcnt build/test-popcnt.c -o ./build/test-popcnt > /dev/null 2>&1
      build/test-popcnt > /dev/null 2>&1
      if [ $? -eq 0 ]; then
         echo "yes"
         POPCNT_FLAG="-mpopcnt"
      else
         echo "no"
      fi
      rm -f build/test-popcnt{,.c}
   #in case -mpopcnt is not available, the test program will use an illegal
   #instruction and that will print out something on stderr when the if
   #construction is exited, whence the following "2> /dev/null"
   fi 2> /dev/null
else
   rm -f build/test-popcnt.c
   echo "no"
fi

#defaults for CFLAGS

if [ -z "$CFLAGS" ]; then
   CFLAGS="-ansi -pedantic -Wall -O2 -funroll-loops -g $POPCNT_FLAG $ABI_FLAG"
fi

#this is needed on PPC G5 and does not hurt on other OS Xes

if [ "$KERNEL" = Darwin ]; then
   CFLAGS="-fno-common $CFLAGS"
fi

#PIC flag

if [ -z "$PIC_FLAG" ]; then
   case "$OS" in
      CYGWIN | MINGW*)
         ;;
      *)
         PIC_FLAG="-fPIC";;
   esac
fi

#test support for thread-local storage

CONFIG_TLS="#define HAVE_TLS 0"

if [ "$TLS" = "1" ]; then
   mkdir -p build
   rm -f build/test-tls > /dev/null 2>&1
   MSG="Testing __thread..."
   ([ -x /bin/echo ] && /bin/echo -n "$MSG") || echo "$MSG"
   echo "__thread int x = 42; int main(int argc, char ** argv) { return x != 42; }" > build/test-tls.c
   $CC build/test-tls.c -o ./build/test-tls > /dev/null 2>&1
   if [ $? -eq 0 ]; then
      build/test-tls > /dev/null 2>&1
      if [ $? -eq 0 ]; then
         echo "yes"
         CONFIG_TLS="#define HAVE_TLS 1"
      else
         echo "no"
      fi
      rm -f build/test-tls{,.c}
   else
      rm -f build/test-tls.c
      echo "no"
   #build-tls can segfault on systems where tls is not available
   fi 2> /dev/null
fi

#pthread configuration

CONFIG_PTHREAD="#define HAVE_PTHREAD ${PTHREAD}"

#include paths

INCS="-I\$(CURDIR)"
for INC_DIR in ${INC_DIRS} ${EXTRA_INC_DIRS}; do
   INCS="${INCS} -I${INC_DIR}"
done

#library paths

LLIBS="-L\$(CURDIR)"
for LIB_DIR in ${LIB_DIRS} ${EXTRA_LIB_DIRS}; do
   LLIBS="${LLIBS} -L${LIB_DIR}"
done

#linker params

LIBS2="-lmpfr -lgmp -lm"
if [ "$PTHREAD" = "1" ]; then
   LIBS2="${LIBS2} -pthread"
fi
LIBS="-lflint $LIBS2"
LIBS2="$LLIBS $LIBS2"
LIBS="$LLIBS $LIBS"

#paths for dynamic linker

case "$OS" in
   CYGWIN | MINGW*)
      DLPATH="PATH";;
   Darwin)
      DLPATH="DYLD_LIBRARY_PATH";;
   sparc)
      DLPATH="LD_LIBRARY_PATH32";;
   sparc64)
      DLPATH="LD_LIBRARY_PATH64";;
   *)
      DLPATH="LD_LIBRARY_PATH";;
esac

DLPATH_ADD="\$(CURDIR)"
for LIB_DIR in ${LIB_DIRS} ${EXTRA_LIB_DIRS}; do
   DLPATH_ADD="${DLPATH_ADD}:${LIB_DIR}"
done

#write out config.h

echo "/* This file is autogenerated by ./configure -- do not edit! */" > config.h
echo "$CONFIG_POPCNT_INTRINSICS" >> config.h
echo "$CONFIG_BLAS" >> config.h
echo "$CONFIG_TLS" >> config.h
echo "$CONFIG_PTHREAD" >> config.h

#write out Makefile

echo "# This file is autogenerated by ./configure -- do not edit!" > Makefile
echo "" >> Makefile
echo "SHELL=/bin/sh" >> Makefile
echo "" >> Makefile
echo "FLINT_STATIC=$STATIC" >> Makefile
echo "FLINT_SHARED=$SHARED" >> Makefile
echo "FLINT_LIB=$FLINT_LIB" >> Makefile
echo "PREFIX=$PREFIX" >> Makefile
echo "" >> Makefile
echo "WANT_NTL=$WANT_NTL" >> Makefile
echo "" >> Makefile
echo "INCS=$INCS" >> Makefile
echo "LIBS=$LIBS" >> Makefile
echo "LIBS2=$LIBS2" >> Makefile
echo "" >> Makefile
echo "CC=$CC" >> Makefile
echo "CXX=$CXX" >> Makefile
echo "AR=$AR" >> Makefile
echo "" >> Makefile
echo "CFLAGS=$CFLAGS" >> Makefile
echo "ABI_FLAG=$ABI_FLAG" >> Makefile
echo "PIC_FLAG=$PIC_FLAG" >> Makefile
echo "" >> Makefile
echo "DLPATH=$DLPATH" >> Makefile
echo "DLPATH_ADD=$DLPATH_ADD" >> Makefile
echo "" >> Makefile

cat Makefile.in >> Makefile

echo "FLINT was successfully configured."