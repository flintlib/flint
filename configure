#!/bin/sh

# (C) 2007, Robert Bradshaw, William Hart, William Stein, Michael Abshoff
# (C) 2011, William Hart
# (C) 2012, William Hart, Jean-Pierre Flori, Thomas DuBuisson
# (C) 2012, Jan Engelhardt

PREFIX=
GMP_DIR="/usr/local"
MPFR_DIR="/usr/local"
NTL_DIR="/usr/local"
GC_DIR="/usr/local"
BLAS_DIR="/usr"
WANT_NTL=0
WANT_BLAS=0
WANT_DEPS=1
SHARED=1
STATIC=1
TLS=1
PTHREAD=1
REENTRANT=0
WANT_GC=0
WANT_TLS=0
WANT_CXX=0
ASSERT=0
BUILD=
EXTENSIONS=
EXT_MODS=
EXTRA_BUILD=
FLINT_DLL=0
FLINT_LIBNAME=
FLINT_SOLIB=0
USE_PKG_CONFIG=0

# The script can be called like `bash configure' and `path/to/configure'. If it
# was called on the former form, `cut' will produce an error. Else, we will
# obtain `path/to'.

_TMP=$(echo $0 | cut -c 1-$((${#0}-10)) 2>&1)
if [ "$?" = "0" ]; then
    FLINT_DIR=${_TMP}
else
    FLINT_DIR="."
fi
SRC_DIR="${FLINT_DIR}/src"
BUILD_DIR="${FLINT_DIR}/build"

# soname version, minor release number and patch number

# Every major version of Flint (1.0, 1.1, 1.2, etc.) gets
# a new major soname number.

# Every time a release happens where interfaces are added
# to Flint, the minor soname number gets incremented.

# Every patch that is made that doesn't change the Flint
# interface updates the patch number.

# However, if backwards incompatible changes are made, both
# the minor and patch numbers are set to 0. (Hopefully this
# doesn't happen in practice.)

# flint => soname
# 2.5.0 => 13.5.0
# 2.5.1 => 13.5.1
# 2.5.2 => 13.5.2
# 2.6.0 => 14.0.0
# 2.6.1 => 14.0.1
# 2.6.2 => 14.0.2
# 2.6.3 => 14.0.3
# 2.7.0 => 15.0.0
# 2.7.1 => 15.0.1
# 2.8.0 => 16.1.0
# 2.8.1 => 16.1.1
# 2.8.2 => 16.1.2
# 2.8.3 => 16.1.3
# 2.8.4 => 16.1.4
# 2.8.5 => 16.1.5
# 2.9.0 => 17.0.0

FLINT_MAJOR=17
FLINT_MINOR=0
FLINT_PATCH=0
FLINT_VERSION="2.9.0"

usage()
{
    cat <<_ACEOF
\`configure' configures FLINT ${FLINT_VERSION}.

Usage: $0 <options> <args>

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              Display this help and exit
  -V, --version           Display version information and exit
  --prefix=<path>         Specify path to installation location
                          [/usr/local]
  --with-mpir=<path>      Specify location of MPIR [/usr/local]
  --with-gmp=<path>       Specify location of GMP [/usr/local]
  --with-mpfr=<path>      Specify location of MPFR [/usr/local]
  --with-blas=<path>      Use BLAS and specify its location [/usr]
  --without-blas          Do not use BLAS [default]
  --with-ntl=<path>       Build NTL interface and specify its location
                          [/usr/local]
  --without-ntl           Do not build NTL interface [default]
  --with-pkg-config       Use pkg-config for finding libraries
  --extensions=<path>     Specify location of extension modules
  --build=arch-os         Specify architecture/OS combination
  --enable-shared         Build a shared library [default]
  --disable-shared        Do not build a shared library
  --enable-static         Build a static library [default]
  --disable-static        Do not build a static library
  --single                Faster [non-reentrant if tls or pthread not
                          used] version of library (default)
  --reentrant             Build fully reentrant [with or without tls,
                          with pthread] version of library
  --with-gc=<path>        GC safe build with path to gc
  --enable-pthread        Use pthread [default]
  --disable-pthread       Do not use pthread
  --enable-tls            Use thread-local storage [default]
  --disable-tls           Do not use thread-local storage
  --enable-assert         Enable use of asserts
  --disable-assert        Disable use of asserts [default]
  --enable-cxx            Enable C++ wrapper tests
  --disable-cxx           Disable C++ wrapper tests [default]
  --disable-dependency-tracking
                          Disable gcc automated dependency tracking

  CC=<name>               Use the C compiler with the given name [gcc]
  CXX=<name>              Use the C++ compiler with the given name [g++]
  AR=<name>               Use the AR library builder with the given name
                          [ar]
  LDCONFIG=<name>         Use the given ldconfig tool
  CFLAGS=<flags>          Pass the given flags to the compiler
  CXXFLAGS=<flags>        Pass the given flags to the C++ compiler
  ABI=[32|64]             Tell the compiler to use given ABI
_ACEOF
}

version()
{
    cat <<_ACEOF
FLINT (Fast Library for Number Theory) version ${FLINT_VERSION}

FLINT is free software: you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License (LGPL) as published
by the Free Software Foundation; either version 2.1 of the License, or
(at your option) any later version.

You should have received a copy of the GNU Lesser General Public License
along with FLINT.  If not, see <https://www.gnu.org/licenses/>.

_ACEOF
}

absolute_path(){
   dirlist="$1"
   retval=""
   for dir in $dirlist; do
      case $dir in
        /*) dir=$dir;;
        *) dir=$PWD/$dir;;
      esac
      retval=$retval" "$dir
   done
   echo $retval
}

#begin config.log
echo "/* This file is autogenerated by FLINT's configure script -- do not edit! */" > ${FLINT_DIR}/config.log
echo "$0 $@" >> ${FLINT_DIR}/config.log

while [ "$1" != "" ]; do
   PARAM=`echo $1 | sed 's/=.*//'`
   VALUE=`echo $1 | sed 's/[^=]*//; s/=//'`
   case "$PARAM" in
      -h|--help)
         usage
         exit 0
         ;;
      -V|--version)
         version
         exit 0
         ;;
      --with-mpir|--with-gmp)
         GMP_DIR=$(absolute_path "$VALUE")
         ;;
      --with-mpfr)
         MPFR_DIR=$(absolute_path "$VALUE")
         ;;
      --with-ntl)
         WANT_NTL=1
         if [ ! -z "$VALUE" ]; then
            NTL_DIR=$(absolute_path "$VALUE")
         fi
         ;;
      --without-ntl)
         WANT_NTL=0
         ;;
      --with-pkg-config)
         USE_PKG_CONFIG=1
         ;;
      --with-blas)
         WANT_BLAS=1
         if [ ! -z "$VALUE" ]; then
            BLAS_DIR=$(absolute_path "$VALUE")
         fi
         ;;
      --without-blas)
         WANT_BLAS=0
         ;;
      --extensions)
         EXTENSIONS=$(absolute_path "$VALUE")
         ;;
      --build)
         BUILD="$VALUE"
         ;;
      --prefix)
         PREFIX=$(absolute_path "$VALUE")
         ;;
      --enable-shared)
         SHARED=1
         ;;
      --disable-shared)
         SHARED=0
         ;;
      --enable-static)
         STATIC=1
         ;;
      --disable-static)
         STATIC=0
         ;;
      --single)
         REENTRANT=0
         ;;
      --reentrant)
         REENTRANT=1
         ;;
      --with-gc)
         WANT_GC=1
         if [ ! -z "$VALUE" ]; then
            GC_DIR="$VALUE"
         fi
         ;;
      --enable-pthread)
         PTHREAD=1
         ;;
      --disable-pthread)
         PTHREAD=0
         ;;
      --enable-tls)
         TLS=1
         WANT_TLS=1;;
      --disable-tls)
         TLS=0
         WANT_TLS=2;;
      --enable-assert)
         ASSERT=1
         ;;
      --disable-assert)
         ASSERT=0
         ;;
      --enable-cxx)
         WANT_CXX=1
         ;;
      --disable-cxx)
         WANT_CXX=0
         ;;
      --disable-dependency-tracking)
         WANT_DEPS=0
         ;; 
      AR)
         AR="$VALUE"
         ;;
      CC)
         CC="$VALUE"
         ;;
      LDCONFIG)
         LDCONFIG="$VALUE"
         ;;
      CXX)
         CXX="$VALUE"
         ;;
      CFLAGS)
         CFLAGS="$VALUE"
         ;;
      CXXFLAGS)
         CXXFLAGS="$VALUE"
         ;;
      ABI)
         ABI="$VALUE"
         ;;
      *)
         usage
         exit 1
         ;;
   esac
   shift
done

#find dependencies

LIBS="m"

if [ "${USE_PKG_CONFIG}" = "1" ]; then
   GMP_LIB_DIR=$(pkg-config --variable=libdir gmp)
   GMP_INC_DIR=$(pkg-config --variable=includedir gmp)
elif [ -d "${GMP_DIR}/lib" ]; then
   GMP_LIB_DIR="${GMP_DIR}/lib"
   GMP_INC_DIR="${GMP_DIR}/include"
elif [ -d "${GMP_DIR}/lib64" ]; then
   GMP_LIB_DIR="${GMP_DIR}/lib64"
   GMP_INC_DIR="${GMP_DIR}/include"
elif [ -d "${GMP_DIR}/.libs" ]; then
   GMP_LIB_DIR="${GMP_DIR}/.libs"
   GMP_INC_DIR="${GMP_DIR}"
else
   echo "Invalid GMP directory"
   echo "Invalid GMP directory: ${GMP_DIR}" >> ${FLINT_DIR}/config.log
   exit 1
fi
LIB_DIRS="${LIB_DIRS} ${GMP_LIB_DIR}"
INC_DIRS="${INC_DIRS} ${GMP_INC_DIR}"
LIBS="${LIBS} gmp"

if [ "${USE_PKG_CONFIG}" = "1" ]; then
   MPFR_LIB_DIR=$(pkg-config --variable=libdir mpfr)
   MPFR_INC_DIR=$(pkg-config --variable=includedir mpfr)
elif [ -d "${MPFR_DIR}/lib" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/lib"
   MPFR_INC_DIR="${MPFR_DIR}/include"
elif [ -d "${MPFR_DIR}/lib64" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/lib64"
   MPFR_INC_DIR="${MPFR_DIR}/include"
elif [ -d "${MPFR_DIR}/.libs" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/.libs"
   MPFR_INC_DIR="${MPFR_DIR}"
elif [ -d "${MPFR_DIR}/src/.libs" ]; then
   MPFR_LIB_DIR="${MPFR_DIR}/src/.libs"
   MPFR_INC_DIR="${MPFR_DIR}/src"
else
   echo "Invalid MPFR directory"
   echo "Invalid MPFR directory: ${MPFR_DIR}" >> ${FLINT_DIR}/config.log
   exit 1
fi
LIB_DIRS="${LIB_DIRS} ${MPFR_LIB_DIR}"
INC_DIRS="${INC_DIRS} ${MPFR_INC_DIR}"
LIBS="${LIBS} mpfr"

#configure extra libraries

if [ "$WANT_NTL" = "1" ]; then
   if [ -d "${NTL_DIR}/lib" ]; then
      NTL_LIB_DIR="${NTL_DIR}/lib"
      NTL_INC_DIR="${NTL_DIR}/include"
   elif [ -d "${NTL_DIR}/lib64" ]; then
      NTL_LIB_DIR="${NTL_DIR}/lib64"
      NTL_INC_DIR="${NTL_DIR}/include"
   else
      echo "Invalid NTL directory"
      echo "Invalid NTL directory: ${NTL_DIR}" >> ${FLINT_DIR}/config.log
      exit 1
   fi
   EXTRA_INC_DIRS="${EXTRA_INC_DIRS} ${NTL_INC_DIR}"
   EXTRA_LIB_DIRS="${EXTRA_LIB_DIRS} ${NTL_LIB_DIR}"
   EXTRA_LIBS="${EXTRA_LIBS} ntl"
fi

if [ "$WANT_BLAS" = "1" ]; then
   if [ "${USE_PKG_CONFIG}" = "1" ]; then
      BLAS_LIB_DIR=$(pkg-config --variable=libdir openblas)
      BLAS_INC_DIR=$(pkg-config --variable=includedir openblas)
   elif [ -d "${BLAS_DIR}/lib/x86_64-linux-gnu/openblas-pthread" ]; then
      BLAS_LIB_DIR="${BLAS_DIR}/lib/x86_64-linux-gnu"
      BLAS_INC_DIR="${BLAS_DIR}/include/x86_64-linux-gnu"
   elif [ -d "${BLAS_DIR}/lib" ]; then
      BLAS_LIB_DIR="${BLAS_DIR}/lib"
      BLAS_INC_DIR="${BLAS_DIR}/include"
   elif [ -d "${BLAS_DIR}" ]; then
      BLAS_LIB_DIR="${BLAS_DIR}"
      BLAS_INC_DIR="${BLAS_DIR}"
   else
      echo "Invalid BLAS directory"
      echo "Invalid BLAS directory: ${BLAS_DIR}" >> ${FLINT_DIR}/config.log
      exit 1
   fi
   EXTRA_INC_DIRS="${EXTRA_INC_DIRS} ${BLAS_INC_DIR}"
   EXTRA_LIB_DIRS="${EXTRA_LIB_DIRS} ${BLAS_LIB_DIR}"
   EXTRA_LIBS="${EXTRA_LIBS} openblas"
fi
CONFIG_BLAS="#define FLINT_USES_BLAS ${WANT_BLAS}"

if [ "$WANT_GC" = "1" ]; then
   if [ "${USE_PKG_CONFIG}" = "1" ]; then
      GC_LIB_DIR=$(pkg-config --variable=libdir bdw-gc)
      GC_INC_DIR=$(pkg-config --variable=includedir bdw-gc)
   elif [ -d "${GC_DIR}" ]; then
      GC_LIB_DIR="${GC_DIR}/lib"
      GC_INC_DIR="${GC_DIR}/include"
   else
      echo "Invalid GC directory"
      echo "Invalid GC directory: ${GC_DIR}" >> ${FLINT_DIR}/config.log
      exit 1
   fi
   EXTRA_INC_DIRS="${EXTRA_INC_DIRS} ${GC_INC_DIR}"
   EXTRA_LIB_DIRS="${EXTRA_LIB_DIRS} ${GC_LIB_DIR}"
   EXTRA_LIBS="${EXTRA_LIBS} gc"
fi
CONFIG_GC="#define FLINT_USES_GC ${WANT_GC}"

# defaults for CC, CXX and AR

if [ -z "$CC" ]; then
   CC=gcc
fi

if [ -z "$CXX" ]; then
   CXX=g++
fi

if [ -z "$AR" ]; then
   AR=ar
fi

#handle gc and reentrant flags

if [ "$WANT_GC" = "1" ]; then
      TLS=0
      if [ "$WANT_TLS" = "1" ]; then
          echo "****WARNING**** GC does not support TLS....disabling TLS"
          echo "GC does not support TLS....disabling TLS" >> ${FLINT_DIR}/config.log
      fi
      cp ${SRC_DIR}/fmpz/link/fmpz_gc.c ${SRC_DIR}/fmpz/fmpz.c
      cp ${SRC_DIR}/fmpz-conversions-gc.in ${SRC_DIR}/fmpz-conversions.h
else
   if [ "$REENTRANT" = "1" ]; then
      cp ${SRC_DIR}/fmpz/link/fmpz_reentrant.c ${SRC_DIR}/fmpz/fmpz.c
      cp ${SRC_DIR}/fmpz-conversions-reentrant.in ${SRC_DIR}/fmpz-conversions.h
   else
      cp ${SRC_DIR}/fmpz/link/fmpz_single.c ${SRC_DIR}/fmpz/fmpz.c
      cp ${SRC_DIR}/fmpz-conversions-single.in ${SRC_DIR}/fmpz-conversions.h
   fi
fi
# Architecture handler

KERNEL=`uname`

if [ -z "$BUILD" ]; then
   ARCH=`uname -m`

   if [ "$(uname | cut -d_ -f1)" = "MSYS" ]; then
      if [ "$ARCH" = "x86_64" ]; then
         OS="MINGW64"
      else
         OS="MINGW32"
      fi
   elif [ "$(uname | cut -d_ -f1)" = "MINGW32" ]; then
      if [ "$ABI" = "64" ]; then
         OS="MINGW64"
      else
         OS="MINGW32"
      fi 
   elif [ "$(uname | cut -d_ -f1)" = "MINGW64" ]; then
      if [ "$ABI" = "32" ]; then
         OS="MINGW32"
      else
         OS="MINGW64"
      fi
   elif [ "$(uname | cut -d_ -f1)" = "CYGWIN" ]; then
      if [ "$ARCH" = "x86_64" ]; then
         if [ "$ABI" = "32" ]; then
            OS="CYGWIN32"
         else
            OS="CYGWIN64"
            ABI="64"
         fi
      else
         OS="CYGWIN32"
      fi
   else
      OS=`uname -s`
   fi
else
   ARCH=`echo "$BUILD" | cut -d- -f1`
   OS=`echo "$BUILD" | cut -d- -f2`
fi

case "$ARCH" in
   x86_64 | amd64)
      MACHINE="x86_64";;
   x86 | i*86 | pc)
      MACHINE="x86";;
   ia64)
      MACHINE="ia64";;
   sparc | sun4*)
      MACHINE="sparc";;
   sparc64)
      MACHINE="sparc64";;
   ppc64 | powerpc64)
      MACHINE="ppc64";;
   ppc | powerpc | [P|p]ower*)
      MACHINE="ppc";;
   mips64)
      MACHINE="mips64";;
   *)
      MACHINE="unknown";;
esac

#Default prefix
if [ -z "$PREFIX" ]; then
   case "$OS" in
      MINGW64)
         PREFIX="/mingw64";;
      MINGW32)
         PREFIX="/mingw32";;
      *)
         PREFIX="/usr/local";;
   esac
fi

#ABI flag
if [ "$ABI" = "32" ]; then
   ABI_FLAG="-m32"
   case "$MACHINE" in
      x86_64)
         MACHINE="x86";;
      sparc64)
         MACHINE="sparc";;
      ppc64)
         MACHINE="ppc";;
      *)
         ;;
   esac
elif [ "$ABI" = "64" ]; then
   ABI_FLAG="-m64"
   if [ "$MACHINE" = "sparc" ]; then
      MACHINE="sparc64"
   fi
   if [ "$MACHINE" = "x86" ]; then
      MACHINE="x86_64"
   fi
fi

if [ "$MACHINE" = "sparc" ] || [ "$MACHINE" = "sparc64" ]; then
   if [ "$CC" = "gcc" ]; then
      CC="gcc -mno-relax"
   fi
fi

echo "Configuring...${MACHINE}-${OS}"
echo "Configuring...${MACHINE}-${OS}" >> ${FLINT_DIR}/config.log

#FLINT shared library

if [ -z "$FLINT_LIB" ]; then
   case "$OS" in
      Darwin)
         FLINT_LIBNAME="libflint.dylib"
         FLINT_LIB="libflint-$FLINT_MAJOR.dylib"
         EXTRA_SHARED_FLAGS="-install_name `pwd`/$FLINT_LIB"
         EXTRA_SHARED_FLAGS="$EXTRA_SHARED_FLAGS -compatibility_version $FLINT_MAJOR.$FLINT_MINOR"
         EXTRA_SHARED_FLAGS="$EXTRA_SHARED_FLAGS -current_version $FLINT_MAJOR.$FLINT_MINOR.$FLINT_PATCH"
         ;;
      CYGWIN*|MINGW*)
         FLINT_LIBNAME="libflint.dll"
         FLINT_LIB="libflint-$FLINT_MAJOR.dll"
         EXTRA_SHARED_FLAGS="-static-libgcc"
         EXTRA_SHARED_FLAGS="$EXTRA_SHARED_FLAGS -shared"
         EXTRA_SHARED_FLAGS="$EXTRA_SHARED_FLAGS -Wl,--export-all-symbols"
         EXTRA_SHARED_FLAGS="$EXTRA_SHARED_FLAGS -Wl,--out-implib,libflint.dll.a"
         FLINT_DLL=1
         ;;
      android)
         FLINT_LIBNAME="libflint.so"
         FLINT_LIB="libflint.so.$FLINT_MAJOR.$FLINT_MINOR.$FLINT_PATCH"
         EXTRA_SHARED_FLAGS="-Wl,-soname,libflint.so"
         FLINT_SOLIB=1
         ;;
      *)
         FLINT_LIBNAME="libflint.so"
         FLINT_LIB="libflint.so.$FLINT_MAJOR.$FLINT_MINOR.$FLINT_PATCH"
         EXTRA_SHARED_FLAGS="-Wl,-soname,libflint.so.$FLINT_MAJOR"
         FLINT_SOLIB=1
         ;;
   esac
 EXTRA_SHARED_FLAGS="$EXTRA_SHARED_FLAGS -Wl,-rpath,$GMP_LIB_DIR"
 EXTRA_SHARED_FLAGS="$EXTRA_SHARED_FLAGS -Wl,-rpath,$MPFR_LIB_DIR"
fi

# sometimes LDCONFIG is not to be found in the path. Look at some common places.
case "$OS" in
   MINGW*|CYGWIN*|Darwin|FreeBSD)
      LDCONFIG="true";;
   *)
      if [ -z "$LDCONFIG" ]; then
         LDCONFIG="true"
         if [ "$FLINT_SOLIB" = "1" ]; then
            if command -v ldconfig > /dev/null; then
               LDCONFIG="ldconfig"
            elif [ -x /sbin/ldconfig ]; then
               LDCONFIG="/sbin/ldconfig"
            fi
         fi
      fi;;
esac

#extension for executables

if [ -z "$EXEEXT" ]; then
   case "$OS" in
      CYGWIN* | MINGW*)
         EXEEXT=".exe";;
      *)
         EXEEXT="";;
   esac
fi

#don't build both shared and static lib on MinGW and Cygwin

case "$OS" in
   CYGWIN* | MINGW*)
      if [ "$STATIC" = "1" ] && [ "$SHARED" = "1" ]; then
         echo "Building both static and shared versions of MPIR/GMP on $OS is currently"
         echo "unsupported, and so is it for MPFR and FLINT."
         echo "You should pass --disable-shared or --disable-static to configure"
         echo "depending on the versions of MPIR/GMP and MPFR you built."
         echo "Both static and shared libraries is not permitted on $OS" >> ${FLINT_DIR}/config.log
	 exit 1
      fi
      ;;
   *)
      ;;
esac 

#select fft_tuning parameters

case "$MACHINE" in
   x86_64 | ia64 | sparc64 | ppc64)
      cp ${SRC_DIR}/fft_tuning64.in ${SRC_DIR}/fft_tuning.h;;
   *)
      cp ${SRC_DIR}/fft_tuning32.in ${SRC_DIR}/fft_tuning.h;;
esac

#test for popcnt flag and set needed CFLAGS

mkdir -p ${BUILD_DIR}
rm -f ${BUILD_DIR}/test-popcnt > /dev/null 2>&1
MSG="Testing __builtin_popcountl..."
printf "%s" "$MSG"
printf "%s" "$MSG" >> ${FLINT_DIR}/config.log
echo "int main(int argc, char ** argv) { 
#if defined(_WIN64)
return __builtin_popcountll(argc) == 100;
#else
return __builtin_popcountl(argc) == 100;
#endif 
}" > ${BUILD_DIR}/test-popcnt.c
$CC ${BUILD_DIR}/test-popcnt.c -o ${BUILD_DIR}/test-popcnt > /dev/null 2>&1
if [ $? -eq 0 ]; then
   printf "%s\n" "yes"
   echo "yes" >> ${FLINT_DIR}/config.log
   CONFIG_POPCNT_INTRINSICS="#define FLINT_USES_POPCNT"

   if [ "$MACHINE" = "x86_64" ]; then
      MSG="Testing native popcount..."
      printf "%s" "$MSG"
      printf "%s" "$MSG" >> ${FLINT_DIR}/config.log
      touch ${BUILD_DIR}/test-popcnt.c
      rm ${BUILD_DIR}/test-popcnt
      $CC -mpopcnt ${BUILD_DIR}/test-popcnt.c -o ${BUILD_DIR}/test-popcnt > /dev/null 2>&1
      ${BUILD_DIR}/test-popcnt > /dev/null 2>&1
      if [ $? -eq 0 ]; then
         printf "%s\n" "yes"
         echo "yes" >> ${FLINT_DIR}/config.log
	 POPCNT_FLAG="-mpopcnt"
      else
         printf "%s\n" "no"
	 echo "no" >> ${FLINT_DIR}/config.log
      fi
      rm -f ${BUILD_DIR}/test-popcnt{,.c}
   #in case -mpopcnt is not available, the test program will use an illegal
   #instruction and that will print out something on stderr when the if
   #construction is exited, whence the following "2> /dev/null"
   fi 2> /dev/null
else
   rm -f ${BUILD_DIR}/test-popcnt.c
   printf "%s\n" "no"
   echo "no" >> ${FLINT_DIR}/config.log
fi

#defaults for CFLAGS
if [ -z "$CFLAGS" ]; then
   if [ "$OS" = "MINGW64" ]; then
      CFLAGS="-std=c99 -O2 -funroll-loops -g $POPCNT_FLAG $ABI_FLAG"
      ANSI_FLAG=""
   elif [ "$OS" = "CYGWIN64" ]; then
      CFLAGS="-O2 -funroll-loops -g -D _WIN64 $POPCNT_FLAG $ABI_FLAG"
      ANSI_FLAG=""
   elif [ "$MACHINE" = "mips64" ]; then
      CFLAGS="-O2 -funroll-loops -g $POPCNT_FLAG $ABI_FLAG"
      ANSI_FLAG=""
   elif test "$KERNEL" = "FreeBSD" -o "$OS" = "OpenBSD"; then
      CFLAGS="-std=c99 -pedantic -Wall -O2 -funroll-loops -g $POPCNT_FLAG $ABI_FLAG"
      ANSI_FLAG=""
      CXXFLAGS="-std=c++11 -pedantic -Wall -O2 -funroll-loops -g $POPCNT_FLAG $ABI_FLAG"
   else
      ANSI_FLAG="-ansi"
      CFLAGS="-pedantic -Wall -O2 -funroll-loops -g $POPCNT_FLAG $ABI_FLAG"
   fi
fi

# avoid spurious warnings with gcc
# CFLAGS="-Wno-stringop-overflow -Wno-stringop-overread -Wno-maybe-uninitialized $CFLAGS"

#this is needed on PPC G5 and does not hurt on other OS Xes

if [ "$KERNEL" = Darwin ]; then
   CFLAGS="-fno-common $CFLAGS"
fi

#PIC flag

if [ -z "$PIC_FLAG" ]; then
   case "$OS" in
      CYGWIN* | MINGW*)
         ;;
      *)
         PIC_FLAG="-fPIC";;
   esac
fi

#libdir

if [ -z "$LIBDIR" ]; then
   case "$OS" in
      CYGWIN*|MINGW*)
         LIBDIR="bin";;
      *)
         LIBDIR="lib";;
   esac
fi

#test support for thread-local storage

CONFIG_TLS="#define FLINT_USES_TLS 0"

if [ "$TLS" = "1" ]; then
   mkdir -p ${BUILD_DIR}
   rm -f ${BUILD_DIR}/test-tls > /dev/null 2>&1
   MSG="Testing __thread..."
   printf "%s" "$MSG"
   printf "%s" "$MSG" >> ${FLINT_DIR}/config.log
   echo "__thread int x = 42; int main(int argc, char ** argv) { return x != 42; }" > ${BUILD_DIR}/test-tls.c
   $CC ${BUILD_DIR}/test-tls.c -o ${BUILD_DIR}/test-tls > /dev/null 2>&1
   if [ $? -eq 0 ]; then
      printf "%s\n" "yes"
      echo "yes" >> ${FLINT_DIR}/config.log
      CONFIG_TLS="#define FLINT_USES_TLS 1"
      rm -f ${BUILD_DIR}/test-tls{,.c}
   else
      rm -f ${BUILD_DIR}/test-tls.c
      printf "%s\n" "no"
      echo "no" >> ${FLINT_DIR}/config.log
   #build-tls can segfault on systems where tls is not available
   fi 2> /dev/null
fi

#fenv configuration

CONFIG_FENV="#define FLINT_USES_FENV 0"

mkdir -p ${BUILD_DIR}
MSG="Testing fenv..."
printf "%s" "$MSG"
printf "%s" "$MSG" >> ${FLINT_DIR}/config.log
echo "#include <fenv.h>" > ${BUILD_DIR}/test-fenv.h
echo "#ifndef FE_DOWNWARD" >> ${BUILD_DIR}/test-fenv.h
echo "#error FE_DOWNWARD not available" >> ${BUILD_DIR}/test-fenv.h
echo "#endif" >> ${BUILD_DIR}/test-fenv.h
if ($CC -E ${BUILD_DIR}/test-fenv.h > /dev/null 2>&1) then
    printf "%s\n" "yes"
    echo "yes" >> ${FLINT_DIR}/config.log
    CONFIG_FENV="#define FLINT_USES_FENV 1"
else
    printf "%s\n" "no"
    echo "no" >> ${FLINT_DIR}/config.log
fi
rm -f ${BUILD_DIR}/test-fenv.h

#endianness configuration

CONFIG_BIG_ENDIAN="#define FLINT_BIG_ENDIAN 0"

mkdir -p ${BUILD_DIR}
MSG="Testing big endian..."
printf "%s" "$MSG"
printf "%s" "MSG" >> ${FLINT_DIR}/config.log
cat > ${BUILD_DIR}/test-endian.c << EOF
__attribute__ ((used)) unsigned short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };
__attribute__ ((used)) unsigned short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };
const char * _ascii() { char* s = (char*) ascii_mm; s = (char*) ascii_ii; return s; }
int main() { _ascii (); return 0; }
EOF
$CC ${BUILD_DIR}/test-endian.c -o ${BUILD_DIR}/test-endian > /dev/null 2>&1
if grep -q BIGenDianSyS ${BUILD_DIR}/test-endian >/dev/null; then
    printf "%s\n" "yes"
    echo "yes" >> ${FLINT_DIR}/config.log
    CONFIG_BIG_ENDIAN="#define FLINT_BIG_ENDIAN 1"
elif grep -q LiTTleEnDian ${BUILD_DIR}/test-endian >/dev/null; then
    printf "%s\n" "no"
    echo "no" >> ${FLINT_DIR}/config.log
else
    echo "Unknown endianness"
    echo "unknown" >> ${FLINT_DIR}/config.log
    exit 1
fi
rm -f ${BUILD_DIR}/test-endian{,.c}

#pthread configuration

CONFIG_PTHREAD="#define FLINT_USES_PTHREAD ${PTHREAD}"

#cpu_set_t configuration

CONFIG_CPU_SET_T="#define FLINT_USES_CPUSET 0"

mkdir -p ${BUILD_DIR}
MSG="Testing cpu_set_t..."
printf "%s" "$MSG"
printf "%s" "$MSG" >> ${FLINT_DIR}/config.log
echo "#define _GNU_SOURCE
#include <sched.h>
#include <pthread.h>
int main(){cpu_set_t s;CPU_ZERO(&s); pthread_getaffinity_np(pthread_self(), sizeof(cpu_set_t), 0); return 0;}" > ${BUILD_DIR}/test-cpu_set_t.c
$CC ${BUILD_DIR}/test-cpu_set_t.c -lpthread -o ${BUILD_DIR}/test-cpu_set_t > /dev/null 2>&1
if [ $? -eq 0 ]; then
    rm -f ${BUILD_DIR}/test-cpu_set_t
    printf "%s\n" "yes"
    echo "yes" >> ${FLINT_DIR}/config.log
    CONFIG_CPU_SET_T="#define FLINT_USES_CPUSET 1"
else
    printf "%s\n" "no"
    echo "no" >> ${FLINT_DIR}/config.log
fi
rm -f ${BUILD_DIR}/test-cpu_set_t.c


#external modules

EXTRA_INC_DIRS="${EXTRA_INC_DIRS} ${EXTENSIONS}"

#include paths

for INC_DIR in ${INC_DIRS} ${EXTRA_INC_DIRS}; do
   INCS="-I${INC_DIR} ${INCS}"
done

if [ "$WANT_CXX" = "1" ]; then
   INCS="-I\$(SRC_DIR) -I\$(BUILD_DIR) -I\$(SRC_DIR)/flintxx_public ${INCS}"
else
   INCS="-I\$(SRC_DIR) -I\$(BUILD_DIR) ${INCS}"
fi

#library paths

LLIBS="-L\$(FLINT_DIR)"
for LIB_DIR in ${LIB_DIRS} ${EXTRA_LIB_DIRS}; do
   LLIBS="${LLIBS} -L${LIB_DIR}"
done

#linker params

if [ "$PTHREAD" = "1" ]; then
   lLIBS2="-lpthread ${lLIBS2}"
fi


for LIB in ${EXTRA_LIBS} ${LIBS}; do
   lLIBS2="-l${LIB} ${lLIBS2}"
done
lLIBS="-lflint $lLIBS2"
LIBS2="$LLIBS $lLIBS2"
LIBS="$LLIBS $lLIBS"

#cxx

# if [ "$WANT_CXX" = "1" ]; then
#    EXTRA_BUILD="$EXTRA_BUILD flintxx"
# fi

if [ -z "$CXXFLAGS" ]; then
   CXXFLAGS="$CFLAGS"
fi

#write out flint-config.h

echo "/* This file is autogenerated by FLINT's configure script -- do not edit! */" > ${SRC_DIR}/flint-config.h
echo "$CONFIG_POPCNT_INTRINSICS" >> ${SRC_DIR}/flint-config.h
echo "$CONFIG_BLAS" >> ${SRC_DIR}/flint-config.h
echo "$CONFIG_TLS" >> ${SRC_DIR}/flint-config.h
echo "$CONFIG_FENV" >> ${SRC_DIR}/flint-config.h
echo "$CONFIG_PTHREAD" >> ${SRC_DIR}/flint-config.h
echo "$CONFIG_BIG_ENDIAN" >> ${SRC_DIR}/flint-config.h
echo "$CONFIG_GC" >> ${SRC_DIR}/flint-config.h
echo "$CONFIG_CPU_SET_T" >> ${SRC_DIR}/flint-config.h
echo "#define FLINT_REENTRANT $REENTRANT" >> ${SRC_DIR}/flint-config.h
echo "#define FLINT_WANT_ASSERT $ASSERT" >> ${SRC_DIR}/flint-config.h
if [ "$FLINT_DLL" = "1" ]; then
   echo "#ifdef FLINT_USE_DLL" >> ${SRC_DIR}/flint-config.h
   echo "#define FLINT_DLL __declspec(dllimport)" >> ${SRC_DIR}/flint-config.h
   echo "#else" >> ${SRC_DIR}/flint-config.h
   echo "#define FLINT_DLL __declspec(dllexport)" >> ${SRC_DIR}/flint-config.h
   echo "#endif" >> ${SRC_DIR}/flint-config.h
else
   echo "#define FLINT_DLL" >> ${SRC_DIR}/flint-config.h
fi

#write out Makefile

echo "# This file is autogenerated by FLINT's configure script -- do not edit!" > ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "SHELL=/bin/sh" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "GMP_LIB_DIR=$GMP_LIB_DIR" >> ${FLINT_DIR}/Makefile
echo "MPFR_LIB_DIR=$MPFR_LIB_DIR" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "FLINT_STATIC=$STATIC" >> ${FLINT_DIR}/Makefile
echo "FLINT_SHARED=$SHARED" >> ${FLINT_DIR}/Makefile
echo "FLINT_LIB=$FLINT_LIB" >> ${FLINT_DIR}/Makefile
echo "FLINT_LIBNAME=$FLINT_LIBNAME" >> ${FLINT_DIR}/Makefile
echo "OS=$OS" >> ${FLINT_DIR}/Makefile
echo "FLINT_SOLIB=$FLINT_SOLIB" >> ${FLINT_DIR}/Makefile
echo "FLINT_MAJOR=$FLINT_MAJOR" >> ${FLINT_DIR}/Makefile
echo "EXEEXT=$EXEEXT" >> ${FLINT_DIR}/Makefile
echo "PREFIX=$PREFIX" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "WANT_NTL=$WANT_NTL" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "INCS=$INCS" >> ${FLINT_DIR}/Makefile
echo "LIBS=$LIBS" >> ${FLINT_DIR}/Makefile
echo "LIBS2=$LIBS2" >> ${FLINT_DIR}/Makefile
echo "LIBDIR=$LIBDIR" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "CC=$CC" >> ${FLINT_DIR}/Makefile
echo "CXX=$CXX" >> ${FLINT_DIR}/Makefile
echo "AR=$AR" >> ${FLINT_DIR}/Makefile
echo "LDCONFIG=$LDCONFIG" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "CFLAGS=$ANSI_FLAG $CFLAGS" >> ${FLINT_DIR}/Makefile
echo "CXXFLAGS=$CXXFLAGS" >> ${FLINT_DIR}/Makefile
echo "ABI_FLAG=$ABI_FLAG" >> ${FLINT_DIR}/Makefile
echo "PIC_FLAG=$PIC_FLAG" >> ${FLINT_DIR}/Makefile
echo "EXTRA_SHARED_FLAGS=$EXTRA_SHARED_FLAGS" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "EXTENSIONS=$EXTENSIONS" >> ${FLINT_DIR}/Makefile
echo "EXTRA_BUILD_DIRS=$EXTRA_BUILD" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile
echo "WANT_DEPS=$WANT_DEPS" >> ${FLINT_DIR}/Makefile
echo "" >> ${FLINT_DIR}/Makefile

cat ${FLINT_DIR}/Makefile.in >> ${FLINT_DIR}/Makefile

echo "FLINT was successfully configured."
echo "FLINT was successfully configured." >> ${FLINT_DIR}/config.log
